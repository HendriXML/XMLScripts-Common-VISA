<?xml version="1.0" encoding="utf-8" standalone="no"?>
<pkg:Library
  xsi:schemaLocation="urn:schemas-www-wisware.nl-scriptingpackages ../XmlSchemas.Common.XmlScript/XMLScripting.Packages.xsd"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:pkg="urn:schemas-www-wisware.nl-scriptingpackages"
  xmlns:sys="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:ado="urn:schemas-www-wisware.nl-xmlscripting-ado"
  xmlns:fil="urn:schemas-www-wisware.nl-xmlscripting-filemanagement"
  xmlns:fwl="urn:schemas-www-wisware.nl-xmlscripting-windowsfirewall"
  xmlns:inx="urn:schemas-www-wisware.nl-xmlscripting-index"
  xmlns:lil="urn:schemas-www-wisware.nl-xmlscripting-linkedlist"
  xmlns:msx="urn:schemas-www-wisware.nl-xmlscripting-xml"
  xmlns:reg="urn:schemas-www-wisware.nl-xmlscripting-registry"
  xmlns:rep="urn:schemas-www-wisware.nl-xmlscripting-report"
  xmlns:sts="urn:schemas-www-wisware.nl-xmlscripting-showstatus"
  xmlns:syu="urn:schemas-www-wisware.nl-xmlscripting-sysutils"
  xmlns:stm="urn:schemas-www-wisware.nl-xmlscripting-statemanagement">
  <Uses>
    <Use Identifier="ElectronicUtils"/>
    <Use Identifier="VISAInstrument"/>
  </Uses>

  <Type>
    <Enumeration Identifier="TDsoSTB" Elements="INB, ESB = 5"/>

    <Enumeration Identifier="TDsoSTBFlag" Elements="INB = 1 shl TDsoSTB.INB, ESB = 1 shl TDsoSTB.ESB"/>

    <Enumeration Identifier="TImageType" Elements="BMP, PNG"/>

    <Enumeration Identifier="THeaderType" Elements="Off, Short, Long" LowAlias="Low" HighAlias="High"/>

    <Enumeration Identifier="TTraceType" Elements="CH1, CH2, CH3, CH4, Math, D0, D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15" LowAlias="Low" HighAlias="High"/>

    <Enumeration Identifier="TChannelType" Elements="CH1, CH2, CH3, CH4" LowAlias="Low" HighAlias="High"/>

    <Enumeration Identifier="TTriggerMode" Elements="Auto, Normal, Single, Stop" LowAlias="Low" HighAlias="High"/>

    <Enumeration Identifier="TMemSize" Elements="ms7K, ms14K, ms70K, ms140K, ms700K, ms1M4, ms7M, ms14M" LowAlias="Low" HighAlias="High"/>

    <Enumeration Identifier="TAvgTime" Elements="avg4, avg16, avg32, avg64, avg128, avg256, avg512, avg1024" LowAlias="Low" HighAlias="High"/>

    <Enumeration Identifier="TAcquireWay" Elements="Normal, PeakDetect, Average, HighRes" LowAlias="Low" HighAlias="High"/>

    <Enumeration Identifier="TCoupling" Elements="AC, ACLowZ, DC, DCLowZ, GND" LowAlias="Low" HighAlias="High"/>

    <Enumeration Identifier="TStatusBit" Elements="SignalAcquired, TriggerIsReady = 13"/>

    <Enumeration Identifier="TWaveFormFormat" Elements="Dat2, All"/>

    <DataClass Identifier="TSiglentScope" Inherit="TVISAInstrument" ClassOfIdentifier="TTSiglentScope">
      <VirtualMethod Identifier="vmFinalize" IsFinalizer="true"/>
      <VirtualMethod Identifier="vmSupportsTrace"/>
      <VirtualMethod Identifier="vmGetTDivNodes"/>
      <Field Identifier="_InternalStatusStates" Type="TBitCounter16"/>
      <Field Identifier="_StatusStates" Type="TBitCounter8"/>
    </DataClass>

    <DataClass Identifier="TSiglentTDivNode">
      <Field Identifier="convTDiv" Type="ConvInt"/>
      <Field Identifier="Previous" Type="TSiglentTDivNode"/>
      <Field Identifier="Next" Type="TSiglentTDivNode"/>
      <Field Identifier="Less" Type="TSiglentTDivNode"/>
      <Field Identifier="More" Type="TSiglentTDivNode"/>
    </DataClass>
    <!--
100ns
200ns
500ns

100s    
    -->

    <DataClass Identifier="TSiglentScope2CH" Inherit="TSiglentScope" ClassOfIdentifier="TTSiglentScope2CH">
      <VirtualMethod Identifier="vmSupportsTrace" Override="true"/>
    </DataClass>

    <DataClass Identifier="TSiglentScope4CH" Inherit="TSiglentScope" ClassOfIdentifier="TTSiglentScope4CH">
    </DataClass>

    <DataClass Identifier="TSiglentSDS1104XE" Inherit="TSiglentScope4CH">
    </DataClass>

    <DataClass Identifier="TSiglentSDS1204XE" Inherit="TSiglentScope4CH">
    </DataClass>

    <DataClass Identifier="TSiglentSDS1102XE" Inherit="TSiglentScope2CH">
    </DataClass>

    <DataClass Identifier="TSiglentSDS1202XE" Inherit="TSiglentScope2CH">
    </DataClass>

    <DataClass Identifier="TSiglentScopeIniHelper" Inherit="TIniHelper">
    </DataClass>

    <DataClass Identifier="TSiglentSDS1104XEIniHelper" Inherit="TSiglentScopeIniHelper">
    </DataClass>

    <DataClass Identifier="TSiglentSDS1204XEIniHelper" Inherit="TSiglentScopeIniHelper">
    </DataClass>

    <DataClass Identifier="TAcquisitionOptions">
      <Field Identifier="LimitSamples" Type="UInt32"/>
    </DataClass>

    <DataClass Identifier="TMultiFrameAcquisitionOptions" Inherit="TAcquisitionOptions">
    </DataClass>

    <DataClass Identifier="TSamplesAcquisitionOptions" Inherit="TAcquisitionOptions">
    </DataClass>

    <DataClass Identifier="TSingleSummedSampleAcquisitionOptions" Inherit="TAcquisitionOptions">
    </DataClass>
  </Type>

  <Constants>
    <Constant Identifier="AwgFixedSamples" Type="Int32" Expression="16384"/>
    <Constant Identifier="AwgMinValue" Type="Int32" Expression="-32768"/>
    <Constant Identifier="AwgMaxValue" Type="Int32" Expression="32767"/>
    <Constant Identifier="AwgMValueRange" Type="Int32" Expression="AwgMaxValue-AwgMinValue"/>

    <Constant Identifier="sErrorGettingAWGWaveData" Type="string" Expression="'Error getting AWG WaveData'"/>
    <Constant Identifier="sErrorGettingScreenCapture" Type="string" Expression="'Error getting ScreenCapture'"/>
    <Constant Identifier="sErrorGettingWaveData" Type="string" Expression="'Error getting WaveData'"/>
    <Constant Identifier="sErrorReadingHeader" Type="string" Expression="'Error reading header'"/>
    <Constant Identifier="sErrorReadingWaveLength" Type="string" Expression="'Error reading WaveLength'"/>
    <Constant Identifier="sErrorReadingWaveData" Type="string" Expression="'Error reading wave data'"/>
    <Constant Identifier="sErrorHeaderParsing" Type="string" Expression="'Parsing error header'"/>
    <Constant Identifier="sErrorHeaderParsingInvalidTrace" Type="string" Expression="'Parsing error header - invalid trace'"/>
    <Constant Identifier="sErrorInvalidTraceData" Type="string" Expression="'Invalid trace data: %d'"/>
    <Constant Identifier="sErrorInvalidChannel" Type="string" Expression="'Invalid channel'"/>
    <Constant Identifier="sErrorInvalidChannelType" Type="string" Expression="'Invalid channel'"/>
    <Constant Identifier="sErrorInvalidTriggerMode" Type="string" Expression="'Invalid trigger mode'"/>
    <Constant Identifier="sErrorInvalidTraceType" Type="string" Expression="'Invalid trace'"/>
    <Constant Identifier="sErrorInvalidHWTraceType" Type="string" Expression="'Invalid hardware trace'"/>
    <Constant Identifier="sErrorInvalidAvgTime" Type="string" Expression="'Invalid AvgTime'"/>
    <Constant Identifier="sErrorInvalidMemSize" Type="string" Expression="'Invalid MemSize'"/>
    <Constant Identifier="sErrorInvalidAcquireWay" Type="string" Expression="'Invalid acquire way'"/>
    <Constant Identifier="sErrorWaveFormFormat" Type="string" Expression="'Unsupported WaveFormFormat'"/>
    <Constant Identifier="sErrorTraceWithoutChannel" Type="string" Expression="'Trace doesn''t have a channel'"/>
    <Constant Identifier="sErrorChannelWithoutTrace" Type="string" Expression="'Channel doesn''t have a trace'"/>
    <Constant Identifier="sInvalidInitialWaveformat" Type="string" Expression="'Invalid initial Waveformat'"/>
    <Constant Identifier="sErrorUnsupportedAcquisitionType" Type="string" Expression="'Unsupported acquisition type'"/>
    <Constant Identifier="sErrorUnsupportedBandWidthAnswer" Type="string" Expression="'Unsupported bandwidth answer: '"/>
    <Constant Identifier="sErrorInvalidHeaderType" Type="string" Expression="'Invalid header'"/>
    <Constant Identifier="sErrorCouldNotDetermineScope" Type="string" Expression="'Could not determine the scope model'"/>
    <Constant Identifier="sErrorUnknownScope" Type="string" Expression="'Unknown scope model: '"/>
    <Constant Identifier="sErrorInvalidCycles" Type="string" Expression="'Invalid cycles'"/>
    <Constant Identifier="sErrorInvalidCoupling" Type="string" Expression="'Invalid Coupling'"/>

    <Constant Identifier="c0" Type="AnsiChar" Expression="'0'"/>
    <Constant Identifier="cVDivisions" Type="UInt32" Expression="8"/>
    <Constant Identifier="cVScreenSteps" Type="UInt32" Expression="200"/>
    <Constant Identifier="cVStepsPerDivision" Type="UInt32" Expression="cVScreenSteps div cVDivisions"/>
    <Constant Identifier="cVGran" Type="Extended" Expression="1/cVStepsPerDivision"/>
    <Constant Identifier="ordC0" Type="UInt32" Expression="CharOrd(c0)"/>
    <Constant Identifier="cVMathGran" Type="Extended" Expression="1/50"/>
    <Constant Identifier="cHDivisions" Type="UInt32" Expression="14"/>
    <Constant Identifier="cHGran" Type="Extended" Expression="cHDivisions/2"/>
    <Constant Identifier="coDescriptionBlockSizeOffset" Type="UInt32" Expression="36"/>
    <Constant Identifier="coWaveSizeOffset" Type="UInt32" Expression="60"/>
    <Constant Identifier="coNumberOfPointsOffset" Type="UInt32" Expression="116"/>
    <Constant Identifier="coPointsPerScreen" Type="UInt32" Expression="120"/>
    <Constant Identifier="coFirstValidPntOffset" Type="UInt32" Expression="124"/>
    <Constant Identifier="coLastValidPntOffset" Type="UInt32" Expression="128"/>
    <Constant Identifier="coSegmentIndexOffset" Type="UInt32" Expression="140"/>
    <Constant Identifier="coVerticalGainOffset" Type="UInt32" Expression="156"/>
    <Constant Identifier="coVerticalOffsetOffset" Type="UInt32" Expression="160"/>
    <Constant Identifier="coNominalBitsOffset" Type="UInt32" Expression="172"/>
    <Constant Identifier="coHorizontalIntervalOffset" Type="UInt32" Expression="176"/>
    <Constant Identifier="coHorizontalOffsetOffset" Type="UInt32" Expression="180"/>
    <Constant Identifier="coPixelOffsetOffset" Type="UInt32" Expression="188"/>
    <Constant Identifier="coVUnitOffset" Type="UInt32" Expression="196"/>
    <Constant Identifier="coHorizontalUncertaintyOffset" Type="UInt32" Expression="292"/>
    <Constant Identifier="coTriggerTimeOffset" Type="UInt32" Expression="296"/>
    <Constant Identifier="coProbeAttenuationOffset" Type="UInt32" Expression="328"/>
    <Constant Identifier="cWaveCaptureTimeout" Type="UInt32" Expression="1000000"/>
    <Constant Identifier="cWaveBlobSize" Type="UInt32" Expression="29360640"/>
    <Constant Identifier="cScreenCapureBlobSize" Type="UInt32" Expression="1000000"/>

    <Constant Identifier="cNameChannelTypeCH1" Type="string" Expression="'CH1'"/>
    <Constant Identifier="cNameChannelTypeCH2" Type="string" Expression="'CH2'"/>
    <Constant Identifier="cNameChannelTypeCH3" Type="string" Expression="'CH3'"/>
    <Constant Identifier="cNameChannelTypeCH4" Type="string" Expression="'CH4'"/>
    <Constant Identifier="cNameTraceTypeCH1" Type="string" Expression="'CH1'"/>
    <Constant Identifier="cNameTraceTypeCH2" Type="string" Expression="'CH2'"/>
    <Constant Identifier="cNameTraceTypeCH3" Type="string" Expression="'CH3'"/>
    <Constant Identifier="cNameTraceTypeCH4" Type="string" Expression="'CH4'"/>
    <Constant Identifier="cNameTraceTypeMath" Type="string" Expression="'Math'"/>
    <Constant Identifier="cNameTraceTypeD0" Type="string" Expression="'D0'"/>
    <Constant Identifier="cNameTraceTypeD1" Type="string" Expression="'D1'"/>
    <Constant Identifier="cNameTraceTypeD2" Type="string" Expression="'D2'"/>
    <Constant Identifier="cNameTraceTypeD3" Type="string" Expression="'D3'"/>
    <Constant Identifier="cNameTraceTypeD4" Type="string" Expression="'D4'"/>
    <Constant Identifier="cNameTraceTypeD5" Type="string" Expression="'D5'"/>
    <Constant Identifier="cNameTraceTypeD6" Type="string" Expression="'D6'"/>
    <Constant Identifier="cNameTraceTypeD7" Type="string" Expression="'D7'"/>
    <Constant Identifier="cNameTraceTypeD8" Type="string" Expression="'D8'"/>
    <Constant Identifier="cNameTraceTypeD9" Type="string" Expression="'D9'"/>
    <Constant Identifier="cNameTraceTypeD10" Type="string" Expression="'D10'"/>
    <Constant Identifier="cNameTraceTypeD11" Type="string" Expression="'D11'"/>
    <Constant Identifier="cNameTraceTypeD12" Type="string" Expression="'D12'"/>
    <Constant Identifier="cNameTraceTypeD13" Type="string" Expression="'D13'"/>
    <Constant Identifier="cNameTraceTypeD14" Type="string" Expression="'D14'"/>
    <Constant Identifier="cNameTraceTypeD15" Type="string" Expression="'D15'"/>
    <Constant Identifier="cNameTriggerModeAuto" Type="string" Expression="'Auto'"/>
    <Constant Identifier="cNameTriggerModeNormal" Type="string" Expression="'Normal'"/>
    <Constant Identifier="cNameTriggerModeSingle" Type="string" Expression="'Single'"/>
    <Constant Identifier="cNameTriggerModeStop" Type="string" Expression="'Stop'"/>
    <Constant Identifier="cNameMemSize7K" Type="string" Expression="'7K'"/>
    <Constant Identifier="cNameMemSize14K" Type="string" Expression="'14K'"/>
    <Constant Identifier="cNameMemSize70K" Type="string" Expression="'70K'"/>
    <Constant Identifier="cNameMemSize140K" Type="string" Expression="'140K'"/>
    <Constant Identifier="cNameMemSize700K" Type="string" Expression="'700K'"/>
    <Constant Identifier="cNameMemSize1M4" Type="string" Expression="'1M4'"/>
    <Constant Identifier="cNameMemSize7M" Type="string" Expression="'7M'"/>
    <Constant Identifier="cNameMemSize14M" Type="string" Expression="'14M'"/>
    <Constant Identifier="cNameAvg4" Type="string" Expression="'4'"/>
    <Constant Identifier="cNameAvg16" Type="string" Expression="'16'"/>
    <Constant Identifier="cNameAvg32" Type="string" Expression="'32'"/>
    <Constant Identifier="cNameAvg64" Type="string" Expression="'64'"/>
    <Constant Identifier="cNameAvg128" Type="string" Expression="'128'"/>
    <Constant Identifier="cNameAvg256" Type="string" Expression="'256'"/>
    <Constant Identifier="cNameAvg512" Type="string" Expression="'512'"/>
    <Constant Identifier="cNameAvg1024" Type="string" Expression="'1024'"/>
    <Constant Identifier="cNameAcquireWayNormal" Type="string" Expression="'Normal'"/>
    <Constant Identifier="cNameAcquireWayPeakDetect" Type="string" Expression="'PeakDetect'"/>
    <Constant Identifier="cNameAcquireWayAverage" Type="string" Expression="'Average'"/>
    <Constant Identifier="cNameAcquireWayHighRes" Type="string" Expression="'HighRes'"/>

    <Constant Identifier="cNameCouplingACHighZ" Type="string" Expression="'ACHighZ'"/>
    <Constant Identifier="cNameCouplingACLowZ" Type="string" Expression="'ACLowZ'"/>
    <Constant Identifier="cNameCouplingDCHighZ" Type="string" Expression="'DCHighZ'"/>
    <Constant Identifier="cNameCouplingDCLowZ" Type="string" Expression="'DCLowZ'"/>
    <Constant Identifier="cNameCouplingGND" Type="string" Expression="'GND'"/>

    <Constant Identifier="cVidChannelTypeCH1" Type="ViString" Expression="'C1'"/>
    <Constant Identifier="cVidChannelTypeCH2" Type="ViString" Expression="'C2'"/>
    <Constant Identifier="cVidChannelTypeCH3" Type="ViString" Expression="'C3'"/>
    <Constant Identifier="cVidChannelTypeCH4" Type="ViString" Expression="'C4'"/>
    <Constant Identifier="cVidTraceTypeCH1" Type="ViString" Expression="'C1'"/>
    <Constant Identifier="cVidTraceTypeCH2" Type="ViString" Expression="'C2'"/>
    <Constant Identifier="cVidTraceTypeCH3" Type="ViString" Expression="'C3'"/>
    <Constant Identifier="cVidTraceTypeCH4" Type="ViString" Expression="'C4'"/>
    <Constant Identifier="cVidTraceTypeMath" Type="ViString" Expression="'MATH'"/>
    <Constant Identifier="cVidTraceTypeD0" Type="ViString" Expression="'D0'"/>
    <Constant Identifier="cVidTraceTypeD1" Type="ViString" Expression="'D1'"/>
    <Constant Identifier="cVidTraceTypeD2" Type="ViString" Expression="'D2'"/>
    <Constant Identifier="cVidTraceTypeD3" Type="ViString" Expression="'D3'"/>
    <Constant Identifier="cVidTraceTypeD4" Type="ViString" Expression="'D4'"/>
    <Constant Identifier="cVidTraceTypeD5" Type="ViString" Expression="'D5'"/>
    <Constant Identifier="cVidTraceTypeD6" Type="ViString" Expression="'D6'"/>
    <Constant Identifier="cVidTraceTypeD7" Type="ViString" Expression="'D7'"/>
    <Constant Identifier="cVidTraceTypeD8" Type="ViString" Expression="'D8'"/>
    <Constant Identifier="cVidTraceTypeD9" Type="ViString" Expression="'D9'"/>
    <Constant Identifier="cVidTraceTypeD10" Type="ViString" Expression="'D10'"/>
    <Constant Identifier="cVidTraceTypeD11" Type="ViString" Expression="'D11'"/>
    <Constant Identifier="cVidTraceTypeD12" Type="ViString" Expression="'D12'"/>
    <Constant Identifier="cVidTraceTypeD13" Type="ViString" Expression="'D13'"/>
    <Constant Identifier="cVidTraceTypeD14" Type="ViString" Expression="'D14'"/>
    <Constant Identifier="cVidTraceTypeD15" Type="ViString" Expression="'D15'"/>
    <Constant Identifier="cVidTriggerModeAuto" Type="ViString" Expression="'AUTO'"/>
    <Constant Identifier="cVidTriggerModeNormal" Type="ViString" Expression="'NORM'"/>
    <Constant Identifier="cVidTriggerModeSingle" Type="ViString" Expression="'SINGLE'"/>
    <Constant Identifier="cVidTriggerModeStop" Type="ViString" Expression="'STOP'"/>
    <Constant Identifier="cVidMemSize7K" Type="ViString" Expression="'7K'"/>
    <Constant Identifier="cVidMemSize14K" Type="ViString" Expression="'14K'"/>
    <Constant Identifier="cVidMemSize70K" Type="ViString" Expression="'70K'"/>
    <Constant Identifier="cVidMemSize140K" Type="ViString" Expression="'140K'"/>
    <Constant Identifier="cVidMemSize700K" Type="ViString" Expression="'700K'"/>
    <Constant Identifier="cVidMemSize1M4" Type="ViString" Expression="'1.4M'"/>
    <Constant Identifier="cVidMemSize7M" Type="ViString" Expression="'7M'"/>
    <Constant Identifier="cVidMemSize14M" Type="ViString" Expression="'14M'"/>
    <Constant Identifier="cVidAvgTime4" Type="ViString" Expression="'4'"/>
    <Constant Identifier="cVidAvgTime16" Type="ViString" Expression="'16'"/>
    <Constant Identifier="cVidAvgTime32" Type="ViString" Expression="'32'"/>
    <Constant Identifier="cVidAvgTime64" Type="ViString" Expression="'64'"/>
    <Constant Identifier="cVidAvgTime128" Type="ViString" Expression="'128'"/>
    <Constant Identifier="cVidAvgTime256" Type="ViString" Expression="'256'"/>
    <Constant Identifier="cVidAvgTime512" Type="ViString" Expression="'512'"/>
    <Constant Identifier="cVidAvgTime1024" Type="ViString" Expression="'1024'"/>
    <Constant Identifier="cVidAcquireWayNormal" Type="ViString" Expression="'SAMPLING'"/>
    <Constant Identifier="cVidAcquireWayPeakDetect" Type="ViString" Expression="'PEAK_DETECT'"/>
    <Constant Identifier="cVidAcquireWayAverage" Type="ViString" Expression="'AVERAGE'"/>
    <Constant Identifier="cVidAcquireWayHighRes" Type="ViString" Expression="'HIGH_RES'"/>
    <Constant Identifier="cVidHeaderTypeOff" Type="ViString" Expression="'OFF'"/>
    <Constant Identifier="cVidHeaderTypeShort" Type="ViString" Expression="'SHORT'"/>
    <Constant Identifier="cVidHeaderTypeLong" Type="ViString" Expression="'LONG'"/>

    <Constant Identifier="cVidCouplingACHighZ" Type="string" Expression="'A1M'"/>
    <Constant Identifier="cVidCouplingACLowZ" Type="string" Expression="'A50'"/>
    <Constant Identifier="cVidCouplingDCHighZ" Type="string" Expression="'D1M'"/>
    <Constant Identifier="cVidCouplingDCLowZ" Type="string" Expression="'D50'"/>
    <Constant Identifier="cVidCouplingGND" Type="string" Expression="'GND'"/>

    <Constant Identifier="viSpace" Type="ViString" Expression="' '"/>
    <Constant Identifier="viParamSep" Type="ViString" Expression="','"/>

    <Constant Identifier="cTRIG_MODEQuery" Type="ViString" Expression="'TRIG_MODE?'"/>
    <Constant Identifier="cTRIG_MODECommand" Type="ViString" Expression="'TRIG_MODE '"/>
    <Constant Identifier="cTIME_DIVQuery" Type="ViString" Expression="'TIME_DIV?'"/>
    <Constant Identifier="cTIME_DIVCommand" Type="ViString" Expression="'TIME_DIV '"/>
    <Constant Identifier="cMATH_VERT_DIVQuery" Type="ViString" Expression="'MATH_VERT_DIV?'"/>
    <Constant Identifier="cMATH_VERT_DIVCommand" Type="ViString" Expression="'MATH_VERT_DIV '"/>
    <Constant Identifier="cMATH_VERT_POSQuery" Type="ViString" Expression="'MATH_VERT_POS?'"/>
    <Constant Identifier="cMATH_VERT_POSCommand" Type="ViString" Expression="'MATH_VERT_POS '"/>
    <Constant Identifier="cTRIG_DELAYQuery" Type="ViString" Expression="'TRIG_DELAY?'"/>
    <Constant Identifier="cTRIG_DELAYCommand" Type="ViString" Expression="'TRIG_DELAY '"/>
    <Constant Identifier="cVOLT_DIVQuery" Type="ViString" Expression="':VOLT_DIV?'"/>
    <Constant Identifier="cVOLT_DIVCommand" Type="ViString" Expression="':VOLT_DIV '"/>
    <Constant Identifier="cTRIG_LEVELQuery" Type="ViString" Expression="'TRIG_LEVEL?'"/>
    <Constant Identifier="cTRIG_LEVELCommand" Type="ViString" Expression="':TRIG_LEVEL '"/>
    <Constant Identifier="cVOFFSETQuery" Type="ViString" Expression="':OFFSET?'"/>
    <Constant Identifier="cVOFFSETCommand" Type="ViString" Expression="':OFFSET '"/>
    <Constant Identifier="cATTENUATIONQuery" Type="ViString" Expression="':ATTENUATION?'"/>
    <Constant Identifier="cATTENUATIONCommand" Type="ViString" Expression="':ATTENUATION '"/>
    <Constant Identifier="cSARAQuery" Type="ViString" Expression="'SARA?'"/>
    <Constant Identifier="cTRIG_SELECTQuery" Type="ViString" Expression="'TRIG_SELECT?'"/>
    <Constant Identifier="cTRIG_SELECTCommand" Type="ViString" Expression="'TRIG_SELECT '"/>
    <Constant Identifier="cTRIG_SLOPEQuery" Type="ViString" Expression="'TRIG_SLOPE?'"/>
    <Constant Identifier="cTRIG_SLOPECommand" Type="ViString" Expression="':TRIG_SLOPE '"/>
    <Constant Identifier="cChannelTRIG_LEVELCommand" Type="ViString" Expression="':TRIG_LEVEL '"/>
    <Constant Identifier="cTRIG_PATTERNQuery" Type="ViString" Expression="'TRIG_PATTERN?'"/>
    <Constant Identifier="cTRIG_PATTERNCommand" Type="ViString" Expression="'TRIG_PATTERN '"/>
    <Constant Identifier="cSTOPCommand" Type="ViString" Expression="'STOP'"/>
    <Constant Identifier="cARMCommand" Type="ViString" Expression="'ARM'"/>
    <Constant Identifier="cINRQuery" Type="ViString" Expression="'INR?'"/>
    <Constant Identifier="cACQUIRE_WAYAverageCommand" Type="ViString" Expression="'ACQUIRE_WAY AVERAGE,'"/>
    <Constant Identifier="cACQUIRE_WAYQuery" Type="ViString" Expression="'ACQUIRE_WAY?'"/>
    <Constant Identifier="cACQUIRE_WAYCommand" Type="ViString" Expression="'ACQUIRE_WAY '"/>
    <Constant Identifier="cSCDPCommand" Type="ViString" Expression="'SCDP'"/>
    <Constant Identifier="cTRACEQuery" Type="ViString" Expression="':TRACE?'"/>
    <Constant Identifier="cTRACECommand" Type="ViString" Expression="':TRACE '"/>
    <Constant Identifier="cHISTORY_MODEQuery" Type="ViString" Expression="'HISTORY_MODE?'"/>
    <Constant Identifier="cHISTORY_MODECommand" Type="ViString" Expression="'HISTORY_MODE '"/>
    <Constant Identifier="cMEMORY_SIZEQuery" Type="ViString" Expression="'MEMORY_SIZE?'"/>
    <Constant Identifier="cMEMORY_SIZECommand" Type="ViString" Expression="'MEMORY_SIZE '"/>
    <Constant Identifier="cWAVEFORM_SETUPTYPE1Command" Type="ViString" Expression="'WAVEFORM_SETUP TYPE,1'"/>
    <Constant Identifier="cWAVEFORM_SETUPCommand" Type="ViString" Expression="'WAVEFORM_SETUP SP,%d,NP,%d,FP,%d,SN,%d'"/>
    <Constant Identifier="cBANDWIDTH_LIMITQuery" Type="ViString" Expression="'BANDWIDTH_LIMIT?'"/>
    <Constant Identifier="cBANDWIDTH_LIMITCommand" Type="ViString" Expression="'BANDWIDTH_LIMIT '"/>
    <Constant Identifier="cCHDRQuery" Type="ViString" Expression="'CHDR?'"/>
    <Constant Identifier="cCHDRCommand" Type="ViString" Expression="'CHDR '"/>
    <Constant Identifier="cCOUPLINGQuery" Type="ViString" Expression="':COUPLING?'"/>
    <Constant Identifier="cCOUPLINGCommand" Type="ViString" Expression="':COUPLING '"/>
    <Constant Identifier="cWAVEFORMQuery" Type="ViString" Expression="':WAVEFORM? '"/>
    <Constant Identifier="cWaitCommand" Type="ViString" Expression="'WAIT'"/>
    <Constant Identifier="cWaitTimeoutCommand" Type="ViString" Expression="'WAIT '"/>
    <Constant Identifier="cWVDTQuery" Type="ViString" Expression="'WVDT? '"/>
    <Constant Identifier="cWAVEFORM_DAT2" Type="ViString" Expression="'DAT2'"/>
    <Constant Identifier="cWAVEFORM_ALL" Type="ViString" Expression="'ALL'"/>
  </Constants>

  <Variables>
    <Variable Identifier="ucTDiv" Type="TUnitConvertor" Init="TUnitConvertor.Create(TGranularity.Pico, TSiUnit.Second)"/>
    <Variable Identifier="ucTriggerDelay" Type="TUnitConvertor" Init="ucTDiv"/>

    <Variable Identifier="ucVDiv" Type="TUnitConvertor" Init="TUnitConvertor.Create(TGranularity.Pico, TSiUnit.Volt)"/>
    <Variable Identifier="ucMathVDiv" Type="TUnitConvertor" Init="ucVDiv"/>
    <Variable Identifier="ucMathVPosition" Type="TUnitConvertor" Init="ucVDiv"/>
    <Variable Identifier="ucTriggerLevel" Type="TUnitConvertor" Init="ucVDiv"/>
    <Variable Identifier="ucVOffset" Type="TUnitConvertor" Init="ucVDiv"/>

    <Variable Identifier="ucAttenuation" Type="TUnitConvertor" Init="TUnitConvertor.Create(TGranularity.Micro, TSiUnit.None)"/>

    <Variable Identifier="TraceTypeNameIndex" Type="TMappingCaseInSensitiveUnicodeStringToInt64"/>
    <Variable Identifier="ChannelTypeNameIndex" Type="TMappingCaseInSensitiveUnicodeStringToInt64"/>
    <Variable Identifier="TriggerModeNameIndex" Type="TMappingCaseInSensitiveUnicodeStringToInt64"/>
    <Variable Identifier="MemSizeNameIndex" Type="TMappingCaseInSensitiveUnicodeStringToInt64"/>
    <Variable Identifier="AvgTimeNameIndex" Type="TMappingCaseInSensitiveUnicodeStringToInt64"/>
    <Variable Identifier="AcquireWayNameIndex" Type="TMappingCaseInSensitiveUnicodeStringToInt64"/>
    <Variable Identifier="CouplingNameIndex" Type="TMappingCaseInSensitiveViStringToInt64"/>

    <Variable Identifier="AcquireWayVidIndex" Type="TMappingCaseInSensitiveViStringToInt64"/>
    <Variable Identifier="AvgTimeVidIndex" Type="TMappingCaseInSensitiveViStringToInt64"/>
    <Variable Identifier="ChannelTypeVidIndex" Type="TMappingCaseInSensitiveViStringToInt64"/>
    <Variable Identifier="HeaderTypeVidIndex" Type="TMappingCaseInSensitiveViStringToInt64"/>
    <Variable Identifier="MemSizeVidIndex" Type="TMappingCaseInSensitiveViStringToInt64"/>
    <Variable Identifier="TraceTypeVidIndex" Type="TMappingCaseInSensitiveViStringToInt64"/>
    <Variable Identifier="TriggerModeVidIndex" Type="TMappingCaseInSensitiveViStringToInt64"/>
    <Variable Identifier="CouplingVidIndex" Type="TMappingCaseInSensitiveViStringToInt64"/>
    <Variable Identifier="SiglentScopeTDivHead" Type="TSiglentTDivNode"/>
    <Variable Identifier="SiglentScopeTDivTail" Type="TSiglentTDivNode"/>
    <Variable Identifier="SiglentScopeTDivRoot" Type="TSiglentTDivNode"/>
  </Variables>

  <Procedures>
    <Function Identifier="TTSiglentScope.MatchingClass" Type="TTSiglentScope">
      <Parameters>
        <Parameter Identifier="VisaResource" Type="TVisaResource"/>
      </Parameters>
      <Block>
        <rep:Reporter.Information Target="Visa" Text="Format('Sending: %s', cIDNQuery)" Condition="DoReportVisa"/>
        <Execute Statement="VisaResource.AnsiWrite(cIDNQuery)"/>
        <Variable Identifier="IDN" Type="ViString" Init="VisaResource.AnsiReadNoLF"/>
        <rep:Reporter.Information Target="Visa" Text="Format('Received: %s', IDN)" Condition="DoReportVisa"/>
        <Variable Identifier="Manufacturer" Type="ViString"/>
        <Variable Identifier="Model" Type="ViString"/>
        <Variable Identifier="Field3" Type="ViString"/>
        <Variable Identifier="Field4" Type="ViString"/>
        <Raise Expression="Exception.Create(sErrorCouldNotDetermineScope)" Condition="not DecodeIDN(IDN, Manufacturer, Model, Field3, Field4)"/>
        <!--<rep:Reporter.Information Text="Format('Manufacturer: %s', Manufacturer)"/>
        <rep:Reporter.Information Text="Format('Model: %s', Model)"/>
        <rep:Reporter.Information Text="Format('Field3: %s', Field3)"/>
        <rep:Reporter.Information Text="Format('Field4: %s', Field4)"/>-->
        <Choose>
          <When Expression="Manufacturer = 'Siglent Technologies'">
            <Choose>
              <When Expression="Model='SDS1204X-E'">
                <Execute Statement="Result:= TSiglentSDS1204XE"/>
              </When>
              <When Expression="Model='SDS1104X-E'">
                <Execute Statement="Result:= TSiglentSDS1104XE"/>
              </When>
              <When Expression="Model='SDS1202X-E'">
                <Execute Statement="Result:= TSiglentSDS1202XE"/>
              </When>
              <When Expression="Model='SDS1102X-E'">
                <Execute Statement="Result:= TSiglentSDS1102XE"/>
              </When>
              <Otherwise>
                <Raise Expression="Exception.Create(sErrorUnknownScope + Model)"/>
              </Otherwise>
            </Choose>
          </When>
          <Otherwise>
            <Raise Expression="Exception.Create(sErrorUnknownScope + Manufacturer + ' ' + Model)"/>
          </Otherwise>
        </Choose>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.DivisionsPerScreen" Type="UInt32">
      <Block>
        <Execute Statement="Result := cHDivisions"/>
      </Block>
    </Function>

    <FunctionHeader Identifier="TTSiglentScope.InternalGetTDivRootNode" Type="TSiglentTDivNode">
      <Parameters>
        <Parameter Identifier="Head" Type="TSiglentTDivNode"/>
        <Parameter Identifier="Tail" Type="TSiglentTDivNode"/>
      </Parameters>
    </FunctionHeader>
    <Implementation Identifier="TTSiglentScope.InternalGetTDivRootNode">
      <Variables>
        <Variable Identifier="Head2x" Type="TSiglentTDivNode"/>
      </Variables>
      <Block>
        <Execute Statement="Result:= Head"/>
        <Block Condition="Head = Tail">
          <Execute Statement="Result.Less := ObjNil"/>
          <Execute Statement="Result.More := ObjNil"/>
          <Exit/>
        </Block>
        <Execute Statement="Head2x:= Head"/>
        <RepeatUntilLoop Expression="Head2x = Tail">
          <Execute Statement="Head2x:= Head2x.Next"/>
          <Break Condition="Head2x = Tail"/>
          <Execute Statement="Head2x:= Head2x.Next"/>
          <Execute Statement="Result:= Result.Next"/>
        </RepeatUntilLoop>
        <Choose>
          <When Expression="Result &lt;&gt; Head">
            <Execute Statement="Result.Less := InternalGetTDivRootNode(Head, Result.Previous)"/>
          </When>
          <Otherwise>
            <Execute Statement="Result.Less := ObjNil"/>
          </Otherwise>
        </Choose>
        <Choose>
          <When Expression="Result &lt;&gt; Tail">
            <Execute Statement="Result.More := InternalGetTDivRootNode(Result.Next, Tail)"/>
          </When>
          <Otherwise>
            <Execute Statement="Result.More := ObjNil"/>
          </Otherwise>
        </Choose>
      </Block>
    </Implementation>

    <Function Identifier="TTSiglentScope.GetTDivRootNode" Type="TSiglentTDivNode">
      <Parameters>
        <Parameter Identifier="Head" Type="TSiglentTDivNode"/>
        <Parameter Identifier="Tail" Type="TSiglentTDivNode"/>
      </Parameters>
      <Block>
        <Variable Identifier="Previous" Type="TSiglentTDivNode" Init="ObjNil"/>
        <lil:LinkedList.Iterate Head="Head" ItemType="TSiglentTDivNode" RunningItem="Item" Next="Item.Next">
          <Execute Statement="Item.Previous:= Previous"/>
          <Execute Statement="Previous:= Item"/>
        </lil:LinkedList.Iterate>
        <Execute Statement="Result:= InternalGetTDivRootNode(Head, Tail)"/>
      </Block>
    </Function>

    <Procedure Identifier="TTSiglentScope.GetTDivNodes" VirtualMethod="vmGetTDivNodes">
      <Parameters>
        <Parameter Identifier="Head" Type="TSiglentTDivNode" Direction="Output"/>
        <Parameter Identifier="Tail" Type="TSiglentTDivNode" Direction="Output"/>
        <Parameter Identifier="Root" Type="TSiglentTDivNode" Direction="Output"/>
      </Parameters>
      <Block>
        <Block Condition="IsEmpty(SiglentScopeTDivHead)">
          <Variable Identifier="Factor" Type="ConvInt" Init="100 * facNanoToPico"/>
          <RepeatUntilLoop Expression="Factor &gt;= (100 * facToPico)">
            <lil:LinkedList.LinkUp Head="SiglentScopeTDivHead" Item="TSiglentTDivNode.Create(Factor)" Tail="SiglentScopeTDivTail" TailLinkStatement="SiglentScopeTDivTail.Next:= Item"/>
            <lil:LinkedList.LinkUp Head="SiglentScopeTDivHead" Item="TSiglentTDivNode.Create(Factor * 2)" Tail="SiglentScopeTDivTail" TailLinkStatement="SiglentScopeTDivTail.Next:= Item"/>
            <lil:LinkedList.LinkUp Head="SiglentScopeTDivHead" Item="TSiglentTDivNode.Create(Factor * 5)" Tail="SiglentScopeTDivTail" TailLinkStatement="SiglentScopeTDivTail.Next:= Item"/>
            <Execute Statement="Factor:= Factor * 10"/>
          </RepeatUntilLoop>
          <lil:LinkedList.LinkUp Head="SiglentScopeTDivHead" Item="TSiglentTDivNode.Create(Factor)" Tail="SiglentScopeTDivTail" TailLinkStatement="SiglentScopeTDivTail.Next:= Item"/>
          <Execute Statement="SiglentScopeTDivRoot:= GetTDivRootNode(SiglentScopeTDivHead, SiglentScopeTDivTail)"/>
        </Block>
        <Execute Statement="Head:= SiglentScopeTDivHead"/>
        <Execute Statement="Tail:= SiglentScopeTDivTail"/>
        <Execute Statement="Root:= SiglentScopeTDivRoot"/>
      </Block>
    </Procedure>

    <Function Identifier="TTSiglentScope.InternalGetTDivNode" Type="Boolean">
      <Parameters>
        <Parameter Identifier="Value" Type="ConvInt"/>
        <Parameter Identifier="Root" Type="TSiglentTDivNode"/>
        <Parameter Identifier="LowNode" Type="TSiglentTDivNode" Direction="Output"/>
        <Parameter Identifier="HighNode" Type="TSiglentTDivNode" Direction="Output"/>
      </Parameters>
      <Block>
        <Variable Identifier="PredNode" Type="TSiglentTDivNode" Init="ObjNil"/>
        <Variable Identifier="SuccNode" Type="TSiglentTDivNode" Init="ObjNil"/>
        <Variable Identifier="SearchNode" Type="TSiglentTDivNode" Init="Root"/>
        <WhileLoop Expression="Assigned(SearchNode)">
          <Choose>
            <When Expression="Value &lt; SearchNode.convTDiv">
              <Execute Statement="SuccNode:= SearchNode"/>
              <Execute Statement="SearchNode:= SearchNode.Less"/>
            </When>
            <When Expression="Value &gt; SearchNode.convTDiv">
              <Execute Statement="PredNode:= SearchNode"/>
              <Execute Statement="SearchNode:= SearchNode.More"/>
            </When>
            <Otherwise>
              <Execute Statement="LowNode:= SearchNode"/>
              <Execute Statement="HighNode:= SearchNode"/>
              <Exit Result="True"/>
            </Otherwise>
          </Choose>
        </WhileLoop>
        <Execute Statement="LowNode := PredNode"/>
        <Execute Statement="HighNode := SuccNode"/>
        <Execute Statement="Result := False"/>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.GetTDivNode" Type="Boolean">
      <Parameters>
        <Parameter Identifier="Value" Type="ConvInt"/>
        <Parameter Identifier="LowNode" Type="TSiglentTDivNode" Direction="Output"/>
        <Parameter Identifier="HighNode" Type="TSiglentTDivNode" Direction="Output"/>
      </Parameters>
      <Block>
        <Variable Identifier="Head" Type="TSiglentTDivNode"/>
        <Variable Identifier="Tail" Type="TSiglentTDivNode"/>
        <Variable Identifier="Root" Type="TSiglentTDivNode"/>
        <Execute Statement="GetTDivNodes(Head, Tail, Root)"/>
        <Execute Statement="Result := InternalGetTDivNode(Value, Root, LowNode, HighNode)"/>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.ConvGetCyclesTDiv" Type="ConvInt">
      <Parameters>
        <Parameter Identifier="Frequency" Type="ConvInt"/>
        <Parameter Identifier="Cycles" Type="ConvInt"/>
      </Parameters>
      <Block>
        <!--<Variable Identifier="Value" Type="ConvInt" Init="(facToPico * (Cycles div facToNano)) div ((Frequency div facToMilli) * DivisionsPerScreen)"/>-->
        <Variable Identifier="Divider" Type="Int64" Init="(Frequency * DivisionsPerScreen)"/>
        <Variable Identifier="Value" Type="ConvInt" Init="(facMicroToPico * Cycles + Divider - 1) div Divider"/>
        <Variable Identifier="LowNode" Type="TSiglentTDivNode"/>
        <Variable Identifier="HighNode" Type="TSiglentTDivNode"/>
        <rep:Reporter.Information Text="Format('Time: %s', ucTDiv.IntValueToStr(Value, TUnitPostFix.Separated, ','))" Condition="IsDebugging"/>
        <Execute Statement="GetTDivNode(Value, LowNode, HighNode)"/>
        <Raise Expression="Exception.Create(sErrorInvalidCycles)" Condition="not Assigned(HighNode)"/>
        <Execute Statement="Result:= HighNode.convTDiv"/>
      </Block>
    </Function>
    <!--
function TInterpolater.FindNode(const Key: Extended; out LowNode, HighNode: PValueNodeRecord): Boolean;
 var
  PredNode: PValueNodeRecord;
  SuccNode: PValueNodeRecord;
  SearchNode: PValueNodeRecord;
begin
  PredNode := nil;
  SuccNode := nil;
  SearchNode := FRoot;
  while Assigned(SearchNode) do
  begin
    if Key < SearchNode^.RecKey then
    begin
      SuccNode := SearchNode;
      SearchNode := SearchNode^.RecLess;
      Continue;
    end;
    if Key > SearchNode^.RecKey then
    begin
      PredNode := SearchNode;
      SearchNode := SearchNode^.RecMore;
      Continue;
    end;
    LowNode := SearchNode;
    Exit(True);
  end;
  LowNode := PredNode;
  HighNode := SuccNode;
  Result := False;
end;
   
    -->

    <Function Identifier="TTSiglentScope.SupportsTrace" Type="Boolean" IsDeterministic="true" VirtualMethod="vmSupportsTrace">
      <Parameters>
        <Parameter Identifier="Trace" Type="TTraceType"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= True"/>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope2CH.SupportsTrace" Type="Boolean" IsDeterministic="true" VirtualMethod="vmSupportsTrace">
      <Parameters>
        <Parameter Identifier="Trace" Type="TTraceType"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
        <Case Expression="Trace" Optimalisation="integermapping">
          <On Select="TTraceType.CH1, TTraceType.CH2">
            <Execute Statement="Result:= True"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.TraceChannel" Type="TChannelType" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Trace" Type="TTraceType"/>
      </Parameters>
      <Block>
        <Case Expression="Trace" Optimalisation="integermapping">
          <On Select="TTraceType.CH1">
            <Execute Statement="Result:= TChannelType.CH1"/>
          </On>
          <On Select="TTraceType.CH2">
            <Execute Statement="Result:= TChannelType.CH2"/>
          </On>
          <On Select="TTraceType.CH3">
            <Execute Statement="Result:= TChannelType.CH3"/>
          </On>
          <On Select="TTraceType.CH4">
            <Execute Statement="Result:= TChannelType.CH4"/>
          </On>
          <Otherwise>
            <Raise Expression="Exception.Create(sErrorTraceWithoutChannel)"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.ChannelTrace" Type="TTraceType" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Channel" Type="TChannelType"/>
      </Parameters>
      <Block>
        <Case Expression="Channel" Optimalisation="integermapping">
          <On Select="TChannelType.CH1">
            <Execute Statement="Result:= TTraceType.CH1"/>
          </On>
          <On Select="TChannelType.CH2">
            <Execute Statement="Result:= TTraceType.CH2"/>
          </On>
          <On Select="TChannelType.CH3">
            <Execute Statement="Result:= TTraceType.CH3"/>
          </On>
          <On Select="TChannelType.CH4">
            <Execute Statement="Result:= TTraceType.CH4"/>
          </On>
          <Otherwise>
            <Raise Expression="Exception.Create(sErrorChannelWithoutTrace)"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.ChannelTypeName" Type="string" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="TChannelType"/>
      </Parameters>
      <Block>
        <Case Expression="Value" Optimalisation="integermapping">
          <On Select="TChannelType.CH1">
            <Execute Statement="Result:= cNameChannelTypeCH1"/>
          </On>
          <On Select="TChannelType.CH2">
            <Execute Statement="Result:= cNameChannelTypeCH2"/>
          </On>
          <On Select="TChannelType.CH3">
            <Execute Statement="Result:= cNameChannelTypeCH3"/>
          </On>
          <On Select="TChannelType.CH4">
            <Execute Statement="Result:= cNameChannelTypeCH4"/>
          </On>
          <Otherwise>
            <Raise Expression="Exception.Create(sErrorInvalidChannel)"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.TraceTypeName" Type="string" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="TTraceType"/>
      </Parameters>
      <Block>
        <Case Expression="Value" Optimalisation="integermapping">
          <On Select="TTraceType.CH1">
            <Execute Statement="Result:= cNameTraceTypeCH1"/>
          </On>
          <On Select="TTraceType.CH2">
            <Execute Statement="Result:= cNameTraceTypeCH2"/>
          </On>
          <On Select="TTraceType.CH3">
            <Execute Statement="Result:= cNameTraceTypeCH3"/>
          </On>
          <On Select="TTraceType.CH4">
            <Execute Statement="Result:= cNameTraceTypeCH4"/>
          </On>
          <On Select="TTraceType.Math">
            <Execute Statement="Result:= cNameTraceTypeMath"/>
          </On>
          <On Select="TTraceType.D0">
            <Execute Statement="Result:= cNameTraceTypeD0"/>
          </On>
          <On Select="TTraceType.D1">
            <Execute Statement="Result:= cNameTraceTypeD1"/>
          </On>
          <On Select="TTraceType.D2">
            <Execute Statement="Result:= cNameTraceTypeD2"/>
          </On>
          <On Select="TTraceType.D3">
            <Execute Statement="Result:= cNameTraceTypeD3"/>
          </On>
          <On Select="TTraceType.D4">
            <Execute Statement="Result:= cNameTraceTypeD4"/>
          </On>
          <On Select="TTraceType.D5">
            <Execute Statement="Result:= cNameTraceTypeD5"/>
          </On>
          <On Select="TTraceType.D6">
            <Execute Statement="Result:= cNameTraceTypeD6"/>
          </On>
          <On Select="TTraceType.D7">
            <Execute Statement="Result:= cNameTraceTypeD7"/>
          </On>
          <On Select="TTraceType.D8">
            <Execute Statement="Result:= cNameTraceTypeD8"/>
          </On>
          <On Select="TTraceType.D9">
            <Execute Statement="Result:= cNameTraceTypeD9"/>
          </On>
          <On Select="TTraceType.D10">
            <Execute Statement="Result:= cNameTraceTypeD10"/>
          </On>
          <On Select="TTraceType.D11">
            <Execute Statement="Result:= cNameTraceTypeD11"/>
          </On>
          <On Select="TTraceType.D12">
            <Execute Statement="Result:= cNameTraceTypeD12"/>
          </On>
          <On Select="TTraceType.D13">
            <Execute Statement="Result:= cNameTraceTypeD13"/>
          </On>
          <On Select="TTraceType.D14">
            <Execute Statement="Result:= cNameTraceTypeD14"/>
          </On>
          <On Select="TTraceType.D15">
            <Execute Statement="Result:= cNameTraceTypeD15"/>
          </On>
          <Otherwise>
            <Raise Expression="Exception.Create(sErrorInvalidTraceType)"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.HWTraceTypeName" Type="string" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="TTraceType"/>
      </Parameters>
      <Block>
        <Case Expression="Value" Optimalisation="integermapping">
          <On Select="TTraceType.Math">
            <Raise Expression="Exception.Create(sErrorInvalidHWTraceType)"/>
          </On>
          <Otherwise>
            <Execute Statement="Result:= TraceTypeName(Value)"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.TriggerModeName" Type="string" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="TTriggerMode"/>
      </Parameters>
      <Block>
        <Case Expression="Value" Optimalisation="integermapping">
          <On Select="TTriggerMode.Auto">
            <Execute Statement="Result:= cNameTriggerModeAuto"/>
          </On>
          <On Select="TTriggerMode.Normal">
            <Execute Statement="Result:= cNameTriggerModeNormal"/>
          </On>
          <On Select="TTriggerMode.Single">
            <Execute Statement="Result:= cNameTriggerModeSingle"/>
          </On>
          <On Select="TTriggerMode.Stop">
            <Execute Statement="Result:= cNameTriggerModeStop"/>
          </On>
          <Otherwise>
            <Raise Expression="Exception.Create(sErrorInvalidTriggerMode)"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.MemSizeName" Type="string" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="TMemSize"/>
      </Parameters>
      <Block>
        <Case Expression="Value" Optimalisation="integermapping">
          <On Select="TMemSize.ms7K">
            <Execute Statement="Result:= cNameMemSize7K"/>
          </On>
          <On Select="TMemSize.ms14K">
            <Execute Statement="Result:= cNameMemSize14K"/>
          </On>
          <On Select="TMemSize.ms70K">
            <Execute Statement="Result:= cNameMemSize70K"/>
          </On>
          <On Select="TMemSize.ms140K">
            <Execute Statement="Result:= cNameMemSize140K"/>
          </On>
          <On Select="TMemSize.ms700K">
            <Execute Statement="Result:= cNameMemSize700K"/>
          </On>
          <On Select="TMemSize.ms1M4">
            <Execute Statement="Result:= cNameMemSize1M4"/>
          </On>
          <On Select="TMemSize.ms7M">
            <Execute Statement="Result:= cNameMemSize7M"/>
          </On>
          <On Select="TMemSize.ms14M">
            <Execute Statement="Result:= cNameMemSize14M"/>
          </On>
          <Otherwise>
            <Raise Expression="Exception.Create(sErrorInvalidMemSize)"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.AvgTimeName" Type="string" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="TAvgTime"/>
      </Parameters>
      <Block>
        <Case Expression="Value" Optimalisation="integermapping">
          <On Select="TAvgTime.avg4">
            <Execute Statement="Result:= cNameAvg4"/>
          </On>
          <On Select="TAvgTime.avg16">
            <Execute Statement="Result:= cNameAvg16"/>
          </On>
          <On Select="TAvgTime.avg32">
            <Execute Statement="Result:= cNameAvg32"/>
          </On>
          <On Select="TAvgTime.avg64">
            <Execute Statement="Result:= cNameAvg64"/>
          </On>
          <On Select="TAvgTime.avg128">
            <Execute Statement="Result:= cNameAvg128"/>
          </On>
          <On Select="TAvgTime.avg256">
            <Execute Statement="Result:= cNameAvg256"/>
          </On>
          <On Select="TAvgTime.avg512">
            <Execute Statement="Result:= cNameAvg512"/>
          </On>
          <On Select="TAvgTime.avg1024">
            <Execute Statement="Result:= cNameAvg1024"/>
          </On>
          <Otherwise>
            <Raise Expression="Exception.Create(sErrorInvalidAvgTime)"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.AcquireWayName" Type="string" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="TAcquireWay"/>
      </Parameters>
      <Block>
        <Case Expression="Value" Optimalisation="integermapping">
          <On Select="TAcquireWay.Normal">
            <Execute Statement="Result:= cNameAcquireWayNormal"/>
          </On>
          <On Select="TAcquireWay.PeakDetect">
            <Execute Statement="Result:= cNameAcquireWayPeakDetect"/>
          </On>
          <On Select="TAcquireWay.Average">
            <Execute Statement="Result:= cNameAcquireWayAverage"/>
          </On>
          <On Select="TAcquireWay.HighRes">
            <Execute Statement="Result:= cNameAcquireWayHighRes"/>
          </On>
          <Otherwise>
            <Raise Expression="Exception.Create(sErrorInvalidAvgTime)"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.CouplingName" Type="ViString" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="TCoupling"/>
      </Parameters>
      <Block>
        <Case Expression="Value" Optimalisation="integermapping">
          <On Select="TCoupling.AC">
            <Execute Statement="Result:= cNameCouplingACHighZ"/>
          </On>
          <On Select="TCoupling.ACLowZ">
            <Execute Statement="Result:= cNameCouplingACLowZ"/>
          </On>
          <On Select="TCoupling.DC">
            <Execute Statement="Result:= cNameCouplingDCHighZ"/>
          </On>
          <On Select="TCoupling.DCLowZ">
            <Execute Statement="Result:= cNameCouplingDCLowZ"/>
          </On>
          <On Select="TCoupling.GND">
            <Execute Statement="Result:= cNameCouplingGND"/>
          </On>
          <Otherwise>
            <Raise Expression="Exception.Create(sErrorInvalidCoupling)"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.TraceTypeFromName" Type="TTraceType" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Name" Type="string"/>
      </Parameters>
      <Block>
        <Block Condition="IsEmpty(TraceTypeNameIndex)">
          <Execute Statement="TraceTypeNameIndex:= TMappingCaseInSensitiveUnicodeStringToInt64.Create"/>
          <ForLoop Indexer="I" From="TTraceType.Low" To="TTraceType.High">
            <inx:Index.MapValue Index="TraceTypeNameIndex" Key="TraceTypeName(I)" Value="I"/>
          </ForLoop>
        </Block>
        <Variable Identifier="Found" Type="Boolean"/>
        <inx:Index.FindValue Index="TraceTypeNameIndex" Key="Name" Value="Result" Found="Found" Flags="NoErrorOnNotFound" />
        <Raise Expression="Exception.Create(sErrorInvalidTraceType)" Condition="not Found"/>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.HWTraceTypeFromName" Type="TTraceType" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="string"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= TraceTypeFromName(Value)"/>
        <Case Expression="Result">
          <On Select="TTraceType.Math">
            <Raise Expression="Exception.Create(sErrorInvalidHWTraceType)"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.ChannelTypeFromName" Type="TChannelType" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Name" Type="string"/>
      </Parameters>
      <Block>
        <Block Condition="IsEmpty(ChannelTypeNameIndex)">
          <Execute Statement="ChannelTypeNameIndex:= TMappingCaseInSensitiveUnicodeStringToInt64.Create"/>
          <ForLoop Indexer="I" From="TChannelType.Low" To="TChannelType.High">
            <inx:Index.MapValue Index="ChannelTypeNameIndex" Key="ChannelTypeName(I)" Value="I"/>
          </ForLoop>
        </Block>
        <Variable Identifier="Found" Type="Boolean"/>
        <inx:Index.FindValue Index="ChannelTypeNameIndex" Key="Name" Value="Result" Found="Found" Flags="NoErrorOnNotFound" />
        <Raise Expression="Exception.Create(sErrorInvalidChannelType)" Condition="not Found"/>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.TriggerModeFromName" Type="TTriggerMode" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Name" Type="string"/>
      </Parameters>
      <Block>
        <Block Condition="IsEmpty(TriggerModeNameIndex)">
          <Execute Statement="TriggerModeNameIndex:= TMappingCaseInSensitiveUnicodeStringToInt64.Create"/>
          <ForLoop Indexer="I" From="TTriggerMode.Low" To="TTriggerMode.High">
            <inx:Index.MapValue Index="TriggerModeNameIndex" Key="TriggerModeName(I)" Value="I"/>
          </ForLoop>
        </Block>
        <Variable Identifier="Found" Type="Boolean"/>
        <inx:Index.FindValue Index="TriggerModeNameIndex" Key="Name" Value="Result" Found="Found" Flags="NoErrorOnNotFound" />
        <Raise Expression="Exception.Create(sErrorInvalidTriggerMode)" Condition="not Found"/>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.MemSizeFromName" Type="TMemSize" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Name" Type="string"/>
      </Parameters>
      <Block>
        <Block Condition="IsEmpty(MemSizeNameIndex)">
          <Execute Statement="MemSizeNameIndex:= TMappingCaseInSensitiveUnicodeStringToInt64.Create"/>
          <ForLoop Indexer="I" From="TMemSize.Low" To="TMemSize.High">
            <inx:Index.MapValue Index="MemSizeNameIndex" Key="MemSizeName(I)" Value="I"/>
          </ForLoop>
        </Block>
        <Variable Identifier="Found" Type="Boolean"/>
        <inx:Index.FindValue Index="MemSizeNameIndex" Key="Name" Value="Result" Found="Found" Flags="NoErrorOnNotFound" />
        <Raise Expression="Exception.Create(sErrorInvalidMemSize)" Condition="not Found"/>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.AvgTimeFromName" Type="TAvgTime" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Name" Type="string"/>
      </Parameters>
      <Block>
        <Block Condition="IsEmpty(AvgTimeNameIndex)">
          <Execute Statement="AvgTimeNameIndex:= TMappingCaseInSensitiveUnicodeStringToInt64.Create"/>
          <ForLoop Indexer="I" From="TAvgTime.Low" To="TAvgTime.High">
            <inx:Index.MapValue Index="AvgTimeNameIndex" Key="AvgTimeName(I)" Value="I"/>
          </ForLoop>
        </Block>
        <Variable Identifier="Found" Type="Boolean"/>
        <inx:Index.FindValue Index="AvgTimeNameIndex" Key="Name" Value="Result" Found="Found" Flags="NoErrorOnNotFound" />
        <Raise Expression="Exception.Create(sErrorInvalidAvgTime)" Condition="not Found"/>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.AcquireWayFromName" Type="TAcquireWay" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Name" Type="string"/>
      </Parameters>
      <Block>
        <Block Condition="IsEmpty(AcquireWayNameIndex)">
          <Execute Statement="AcquireWayNameIndex:= TMappingCaseInSensitiveUnicodeStringToInt64.Create"/>
          <ForLoop Indexer="I" From="TAcquireWay.Low" To="TAcquireWay.High">
            <inx:Index.MapValue Index="AcquireWayNameIndex" Key="AcquireWayName(I)" Value="I"/>
          </ForLoop>
        </Block>
        <Variable Identifier="Found" Type="Boolean"/>
        <inx:Index.FindValue Index="AcquireWayNameIndex" Key="Name" Value="Result" Found="Found" Flags="NoErrorOnNotFound" />
        <Raise Expression="Exception.Create(sErrorInvalidAcquireWay)" Condition="not Found"/>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.CouplingFromName" Type="TCoupling" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="string"/>
      </Parameters>
      <Block>
        <Block Condition="IsEmpty(CouplingNameIndex)">
          <Execute Statement="CouplingNameIndex:= TMappingCaseInSensitiveViStringToInt64.Create"/>
          <ForLoop Indexer="I" From="TCoupling.Low" To="TCoupling.High">
            <inx:Index.MapValue Index="CouplingNameIndex" Key="CouplingName(I)" Value="I"/>
          </ForLoop>
        </Block>
        <Variable Identifier="Found" Type="Boolean"/>
        <inx:Index.FindValue Index="CouplingNameIndex" Key="Value" Value="Result" Found="Found" Flags="NoErrorOnNotFound"/>
        <Raise Expression="Exception.Create(sErrorInvalidCoupling)" Condition="not Found"/>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.AcquireWayVid" Type="ViString" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="TAcquireWay"/>
      </Parameters>
      <Block>
        <Case Expression="Value" Optimalisation="integermapping">
          <On Select="TAcquireWay.Normal">
            <Execute Statement="Result:= cVidAcquireWayNormal"/>
          </On>
          <On Select="TAcquireWay.PeakDetect">
            <Execute Statement="Result:= cVidAcquireWayPeakDetect"/>
          </On>
          <On Select="TAcquireWay.Average">
            <Execute Statement="Result:= cVidAcquireWayAverage"/>
          </On>
          <On Select="TAcquireWay.HighRes">
            <Execute Statement="Result:= cVidAcquireWayHighRes"/>
          </On>
          <Otherwise>
            <Raise Expression="Exception.Create(sErrorInvalidAcquireWay)"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.AvgTimeVid" Type="ViString" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="TAvgTime"/>
      </Parameters>
      <Block>
        <Case Expression="Value" Optimalisation="integermapping">
          <On Select="TAvgTime.avg4">
            <Execute Statement="Result:= cVidAvgTime4"/>
          </On>
          <On Select="TAvgTime.avg16">
            <Execute Statement="Result:= cVidAvgTime16"/>
          </On>
          <On Select="TAvgTime.avg32">
            <Execute Statement="Result:= cVidAvgTime32"/>
          </On>
          <On Select="TAvgTime.avg64">
            <Execute Statement="Result:= cVidAvgTime64"/>
          </On>
          <On Select="TAvgTime.avg128">
            <Execute Statement="Result:= cVidAvgTime128"/>
          </On>
          <On Select="TAvgTime.avg256">
            <Execute Statement="Result:= cVidAvgTime256"/>
          </On>
          <On Select="TAvgTime.avg512">
            <Execute Statement="Result:= cVidAvgTime512"/>
          </On>
          <On Select="TAvgTime.avg1024">
            <Execute Statement="Result:= cVidAvgTime1024"/>
          </On>
          <Otherwise>
            <Raise Expression="Exception.Create(sErrorInvalidAvgTime)"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.ChannelTypeVid" Type="ViString" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="TChannelType"/>
      </Parameters>
      <Block>
        <Case Expression="Value" Optimalisation="integermapping">
          <On Select="TChannelType.CH1">
            <Execute Statement="Result:= cVidChannelTypeCH1"/>
          </On>
          <On Select="TChannelType.CH2">
            <Execute Statement="Result:= cVidChannelTypeCH2"/>
          </On>
          <On Select="TChannelType.CH3">
            <Execute Statement="Result:= cVidChannelTypeCH3"/>
          </On>
          <On Select="TChannelType.CH4">
            <Execute Statement="Result:= cVidChannelTypeCH4"/>
          </On>
          <Otherwise>
            <Raise Expression="Exception.Create(sErrorInvalidChannelType)"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.HeaderTypeVid" Type="ViString" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="THeaderType"/>
      </Parameters>
      <Block>
        <Case Expression="Value" Optimalisation="integermapping">
          <On Select="THeaderType.Off">
            <Execute Statement="Result:= cVidHeaderTypeOff"/>
          </On>
          <On Select="THeaderType.Short">
            <Execute Statement="Result:= cVidHeaderTypeShort"/>
          </On>
          <On Select="THeaderType.Long">
            <Execute Statement="Result:= cVidHeaderTypeLong"/>
          </On>
          <Otherwise>
            <Raise Expression="Exception.Create(sErrorInvalidHeaderType)"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.MemSizeVid" Type="ViString" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="TMemSize"/>
      </Parameters>
      <Block>
        <Case Expression="Value" Optimalisation="integermapping">
          <On Select="TMemSize.ms7K">
            <Execute Statement="Result:= cVidMemSize7K"/>
          </On>
          <On Select="TMemSize.ms14K">
            <Execute Statement="Result:= cVidMemSize14K"/>
          </On>
          <On Select="TMemSize.ms70K">
            <Execute Statement="Result:= cVidMemSize70K"/>
          </On>
          <On Select="TMemSize.ms140K">
            <Execute Statement="Result:= cVidMemSize140K"/>
          </On>
          <On Select="TMemSize.ms700K">
            <Execute Statement="Result:= cVidMemSize700K"/>
          </On>
          <On Select="TMemSize.ms1M4">
            <Execute Statement="Result:= cVidMemSize1M4"/>
          </On>
          <On Select="TMemSize.ms7M">
            <Execute Statement="Result:= cVidMemSize7M"/>
          </On>
          <On Select="TMemSize.ms14M">
            <Execute Statement="Result:= cVidMemSize14M"/>
          </On>
          <Otherwise>
            <Raise Expression="Exception.Create(sErrorInvalidMemSize)"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.TraceTypeVid" Type="ViString" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="TTraceType"/>
      </Parameters>
      <Block>
        <Case Expression="Value" Optimalisation="integermapping">
          <On Select="TTraceType.CH1">
            <Execute Statement="Result:= cVidTraceTypeCH1"/>
          </On>
          <On Select="TTraceType.CH2">
            <Execute Statement="Result:= cVidTraceTypeCH2"/>
          </On>
          <On Select="TTraceType.CH3">
            <Execute Statement="Result:= cVidTraceTypeCH3"/>
          </On>
          <On Select="TTraceType.CH4">
            <Execute Statement="Result:= cVidTraceTypeCH4"/>
          </On>
          <On Select="TTraceType.Math">
            <Execute Statement="Result:= cVidTraceTypeMath"/>
          </On>
          <On Select="TTraceType.D0">
            <Execute Statement="Result:= cVidTraceTypeD0"/>
          </On>
          <On Select="TTraceType.D1">
            <Execute Statement="Result:= cVidTraceTypeD1"/>
          </On>
          <On Select="TTraceType.D2">
            <Execute Statement="Result:= cVidTraceTypeD2"/>
          </On>
          <On Select="TTraceType.D3">
            <Execute Statement="Result:= cVidTraceTypeD3"/>
          </On>
          <On Select="TTraceType.D4">
            <Execute Statement="Result:= cVidTraceTypeD4"/>
          </On>
          <On Select="TTraceType.D5">
            <Execute Statement="Result:= cVidTraceTypeD5"/>
          </On>
          <On Select="TTraceType.D6">
            <Execute Statement="Result:= cVidTraceTypeD6"/>
          </On>
          <On Select="TTraceType.D7">
            <Execute Statement="Result:= cVidTraceTypeD7"/>
          </On>
          <On Select="TTraceType.D8">
            <Execute Statement="Result:= cVidTraceTypeD8"/>
          </On>
          <On Select="TTraceType.D9">
            <Execute Statement="Result:= cVidTraceTypeD9"/>
          </On>
          <On Select="TTraceType.D10">
            <Execute Statement="Result:= cVidTraceTypeD10"/>
          </On>
          <On Select="TTraceType.D11">
            <Execute Statement="Result:= cVidTraceTypeD11"/>
          </On>
          <On Select="TTraceType.D12">
            <Execute Statement="Result:= cVidTraceTypeD12"/>
          </On>
          <On Select="TTraceType.D13">
            <Execute Statement="Result:= cVidTraceTypeD13"/>
          </On>
          <On Select="TTraceType.D14">
            <Execute Statement="Result:= cVidTraceTypeD14"/>
          </On>
          <On Select="TTraceType.D15">
            <Execute Statement="Result:= cVidTraceTypeD15"/>
          </On>
          <Otherwise>
            <Raise Expression="Exception.Create(sErrorInvalidTraceType)"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.HWTraceTypeVid" Type="ViString" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="TTraceType"/>
      </Parameters>
      <Block>
        <Case Expression="Value" Optimalisation="integermapping">
          <On Select="TTraceType.Math">
            <Raise Expression="Exception.Create(sErrorInvalidHWTraceType)"/>
          </On>
          <Otherwise>
            <Execute Statement="Result:= TraceTypeVid(Value)"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.TriggerModeVid" Type="ViString" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="TTriggerMode"/>
      </Parameters>
      <Block>
        <Case Expression="Value" Optimalisation="integermapping">
          <On Select="TTriggerMode.Auto">
            <Execute Statement="Result:= cVidTriggerModeAuto"/>
          </On>
          <On Select="TTriggerMode.Normal">
            <Execute Statement="Result:= cVidTriggerModeNormal"/>
          </On>
          <On Select="TTriggerMode.Single">
            <Execute Statement="Result:= cVidTriggerModeSingle"/>
          </On>
          <On Select="TTriggerMode.Stop">
            <Execute Statement="Result:= cVidTriggerModeStop"/>
          </On>
          <Otherwise>
            <Raise Expression="Exception.Create(sErrorInvalidTriggerMode)"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.CouplingVid" Type="ViString" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="TCoupling"/>
      </Parameters>
      <Block>
        <Case Expression="Value" Optimalisation="integermapping">
          <On Select="TCoupling.AC">
            <Execute Statement="Result:= cVidCouplingACHighZ"/>
          </On>
          <On Select="TCoupling.ACLowZ">
            <Execute Statement="Result:= cVidCouplingACLowZ"/>
          </On>
          <On Select="TCoupling.DC">
            <Execute Statement="Result:= cVidCouplingDCHighZ"/>
          </On>
          <On Select="TCoupling.DCLowZ">
            <Execute Statement="Result:= cVidCouplingDCLowZ"/>
          </On>
          <On Select="TCoupling.GND">
            <Execute Statement="Result:= cVidCouplingGND"/>
          </On>
          <Otherwise>
            <Raise Expression="Exception.Create(sErrorInvalidCoupling)"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.AcquireWayFromVid" Type="TAcquireWay" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="string"/>
      </Parameters>
      <Block>
        <Block Condition="IsEmpty(AcquireWayVidIndex)">
          <Execute Statement="AcquireWayVidIndex:= TMappingCaseInSensitiveViStringToInt64.Create"/>
          <ForLoop Indexer="I" From="TAcquireWay.Low" To="TAcquireWay.High">
            <inx:Index.MapValue Index="AcquireWayVidIndex" Key="AcquireWayVid(I)" Value="I"/>
          </ForLoop>
        </Block>
        <Variable Identifier="Found" Type="Boolean"/>
        <inx:Index.FindValue Index="AcquireWayVidIndex" Key="Value" Value="Result" Found="Found" Flags="NoErrorOnNotFound"/>
        <Raise Expression="Exception.Create(sErrorInvalidAcquireWay)" Condition="not Found"/>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.AvgTimeFromVid" Type="TAvgTime" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="string"/>
      </Parameters>
      <Block>
        <Block Condition="IsEmpty(AvgTimeVidIndex)">
          <Execute Statement="AvgTimeVidIndex:= TMappingCaseInSensitiveViStringToInt64.Create"/>
          <ForLoop Indexer="I" From="TAvgTime.Low" To="TAvgTime.High">
            <inx:Index.MapValue Index="AvgTimeVidIndex" Key="AvgTimeVid(I)" Value="I"/>
          </ForLoop>
        </Block>
        <Variable Identifier="Found" Type="Boolean"/>
        <inx:Index.FindValue Index="AvgTimeVidIndex" Key="Value" Value="Result" Found="Found" Flags="NoErrorOnNotFound"/>
        <Raise Expression="Exception.Create(sErrorInvalidAvgTime)" Condition="not Found"/>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.ChannelTypeFromVid" Type="TChannelType" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="string"/>
      </Parameters>
      <Block>
        <Block Condition="IsEmpty(ChannelTypeVidIndex)">
          <Execute Statement="ChannelTypeVidIndex:= TMappingCaseInSensitiveViStringToInt64.Create"/>
          <ForLoop Indexer="I" From="TChannelType.Low" To="TChannelType.High">
            <inx:Index.MapValue Index="ChannelTypeVidIndex" Key="ChannelTypeVid(I)" Value="I"/>
          </ForLoop>
        </Block>
        <Variable Identifier="Found" Type="Boolean"/>
        <inx:Index.FindValue Index="ChannelTypeVidIndex" Key="Value" Value="Result" Found="Found" Flags="NoErrorOnNotFound"/>
        <Raise Expression="Exception.Create(sErrorInvalidChannelType)" Condition="not Found"/>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.HeaderTypeFromVid" Type="THeaderType" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="string"/>
      </Parameters>
      <Block>
        <Block Condition="IsEmpty(HeaderTypeVidIndex)">
          <Execute Statement="HeaderTypeVidIndex:= TMappingCaseInSensitiveViStringToInt64.Create"/>
          <ForLoop Indexer="I" From="THeaderType.Low" To="THeaderType.High">
            <inx:Index.MapValue Index="HeaderTypeVidIndex" Key="HeaderTypeVid(I)" Value="I"/>
          </ForLoop>
        </Block>
        <Variable Identifier="Found" Type="Boolean"/>
        <inx:Index.FindValue Index="HeaderTypeVidIndex" Key="Value" Value="Result" Found="Found" Flags="NoErrorOnNotFound"/>
        <Raise Expression="Exception.Create(sErrorInvalidHeaderType)" Condition="not Found"/>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.MemSizeFromVid" Type="TMemSize" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="string"/>
      </Parameters>
      <Block>
        <Block Condition="IsEmpty(MemSizeVidIndex)">
          <Execute Statement="MemSizeVidIndex:= TMappingCaseInSensitiveViStringToInt64.Create"/>
          <ForLoop Indexer="I" From="TMemSize.Low" To="TMemSize.High">
            <inx:Index.MapValue Index="MemSizeVidIndex" Key="MemSizeVid(I)" Value="I"/>
          </ForLoop>
        </Block>
        <Variable Identifier="Found" Type="Boolean"/>
        <inx:Index.FindValue Index="MemSizeVidIndex" Key="Value" Value="Result" Found="Found" Flags="NoErrorOnNotFound"/>
        <Raise Expression="Exception.Create(sErrorInvalidMemSize)" Condition="not Found"/>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.TraceTypeFromVid" Type="TTraceType" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="string"/>
      </Parameters>
      <Block>
        <Block Condition="IsEmpty(TraceTypeVidIndex)">
          <Execute Statement="TraceTypeVidIndex:= TMappingCaseInSensitiveViStringToInt64.Create"/>
          <ForLoop Indexer="I" From="TTraceType.Low" To="TTraceType.High">
            <inx:Index.MapValue Index="TraceTypeVidIndex" Key="TraceTypeVid(I)" Value="I"/>
          </ForLoop>
        </Block>
        <Variable Identifier="Found" Type="Boolean"/>
        <inx:Index.FindValue Index="TraceTypeVidIndex" Key="Value" Value="Result" Found="Found" Flags="NoErrorOnNotFound"/>
        <Raise Expression="Exception.Create(sErrorInvalidTraceType)" Condition="not Found"/>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.HWTraceTypeFromVid" Type="TTraceType" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="string"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= TraceTypeFromVid(Value)"/>
        <Case Expression="Result">
          <On Select="TTraceType.Math">
            <Raise Expression="Exception.Create(sErrorInvalidHWTraceType)"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.TriggerModeFromVid" Type="TTriggerMode" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="string"/>
      </Parameters>
      <Block>
        <Block Condition="IsEmpty(TriggerModeVidIndex)">
          <Execute Statement="TriggerModeVidIndex:= TMappingCaseInSensitiveViStringToInt64.Create"/>
          <ForLoop Indexer="I" From="TTriggerMode.Low" To="TTriggerMode.High">
            <inx:Index.MapValue Index="TriggerModeVidIndex" Key="TriggerModeVid(I)" Value="I"/>
          </ForLoop>
          <Variable Identifier="Found" Type="Boolean"/>
          <inx:Index.FindValue Index="TriggerModeVidIndex" Key="Value" Value="Result" Found="Found" Flags="NoErrorOnNotFound"/>
          <Raise Expression="Exception.Create(sErrorInvalidTriggerMode)" Condition="not Found"/>
        </Block>
      </Block>
    </Function>

    <Function Identifier="TTSiglentScope.CouplingFromVid" Type="TCoupling" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="string"/>
      </Parameters>
      <Block>
        <Block Condition="IsEmpty(CouplingVidIndex)">
          <Execute Statement="CouplingVidIndex:= TMappingCaseInSensitiveViStringToInt64.Create"/>
          <ForLoop Indexer="I" From="TCoupling.Low" To="TCoupling.High">
            <inx:Index.MapValue Index="CouplingVidIndex" Key="CouplingVid(I)" Value="I"/>
          </ForLoop>
        </Block>
        <Variable Identifier="Found" Type="Boolean"/>
        <inx:Index.FindValue Index="CouplingVidIndex" Key="Value" Value="Result" Found="Found" Flags="NoErrorOnNotFound"/>
        <Raise Expression="Exception.Create(sErrorInvalidCoupling)" Condition="not Found"/>
      </Block>
    </Function>

    <Constructor Identifier="TSiglentScope.Create">
      <Parameters>
        <Parameter Identifier="VisaResource" Type="TVisaResource"/>
      </Parameters>
      <Block>
        <Execute Statement="inherited Create(VisaResource)"/>
        <Execute Statement="_StatusStates:= TBitCounter8.Create"/>
        <Execute Statement="_InternalStatusStates:= TBitCounter16.Create"/>
      </Block>
    </Constructor>
    <Procedure Identifier="TSiglentScope.Finalize" VirtualMethod="vmFinalize">
      <Block>
        <Free Expression="_InternalStatusStates"/>
        <Free Expression="_StatusStates"/>
      </Block>
    </Procedure>

    <Property Identifier="TSiglentScope.CommHeader" Type="THeaderType">
      <Getter>
        <Variable Identifier="ValueS" Type="ViString" Init="QueryString(cCHDRQuery)"/>
        <Choose>
          <When Expression="ValueS = cVidHeaderTypeOff">
            <Execute Statement="Result:= THeaderType.Off"/>
          </When>
          <When Expression="ValueS = cCHDRCommand + cVidHeaderTypeShort">
            <Execute Statement="Result:= THeaderType.Short"/>
          </When>
          <When Expression="ValueS = cCHDRCommand + cVidHeaderTypeLong">
            <Execute Statement="Result:= THeaderType.Long"/>
          </When>
          <Otherwise>
            <Raise Expression="Exception.Create(sErrorInvalidHeaderType)"/>
          </Otherwise>
        </Choose>
      </Getter>
      <Setter>
        <Execute Statement="WriteString(cCHDRCommand + HeaderTypeVid(Value))"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentScope.AcquireWay" Type="TAcquireWay" >
      <Getter>
        <Execute Statement="Result:= AcquireWayFromVid(QueryString(cACQUIRE_WAYQuery))"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteString(cACQUIRE_WAYCommand + AcquireWayVid(Value))"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentScope.Coupling" Type="TCoupling" >
      <Parameters>
        <Parameter Identifier="Channel" Type="TChannelType"/>
      </Parameters>
      <Getter>
        <Execute Statement="Result:= CouplingFromVid(QueryString(ChannelTypeVid(Channel) + cCOUPLINGQuery))"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteString(ChannelTypeVid(Channel) + cCOUPLINGCommand + CouplingVid(Value))"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentScope.MemorySize" Type="TMemSize" >
      <Getter>
        <Execute Statement="Result:= MemSizeFromVid(QueryString(cMEMORY_SIZEQuery))"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteString(cMEMORY_SIZECommand + MemSizeVid(Value))"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentScope.StatusState" Type="TRegisterState">
      <Parameters>
        <Parameter Identifier="Bit" Type="TDsoSTB"/>
      </Parameters>
      <Getter>
        <Execute Statement="_StatusStates.Update(ReadSTB)"/>
        <Execute Statement="Result:= _StatusStates[Bit]"/>
      </Getter>
    </Property>

    <Function Identifier="TSiglentScope.StatusChanged" Type="Boolean">
      <Parameters>
        <Parameter Identifier="Bit" Type="TDsoSTB"/>
        <Parameter Identifier="State" Type="TRegisterState" Direction="InputOutput"/>
      </Parameters>
      <Block>
        <Execute Statement="_StatusStates.Update(ReadSTB)"/>
        <Variable Identifier="NewState" Type="UInt64" Init="_StatusStates[Bit]"/>
        <Execute Statement="Result:= NewState &lt;&gt; State"/>
        <Execute Statement="State:= NewState"/>
      </Block>
    </Function>

    <Procedure Identifier="TSiglentScope.SetTrigger">
      <Parameters>
        <Parameter Identifier="Channel" Type="TChannelType"/>
        <Parameter Identifier="Value" Type="Extended"/>
      </Parameters>
      <Block>
        <Execute Statement="WriteString(ChannelTypeVid(Channel) + cChannelTRIG_LEVELCommand + FloatToCode(Value))"/>
      </Block>
    </Procedure>

    <Property Identifier="TSiglentScope.TriggerSelect" Type="ViString">
      <Getter>
        <Execute Statement="Result:= QueryString(cTRIG_SELECTQuery)"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteString(cTRIG_SELECTCommand + Value)"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentScope.TriggerPattern" Type="ViString">
      <Getter>
        <Execute Statement="Result:= QueryString(cTRIG_PATTERNQuery)"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteString(cTRIG_PATTERNCommand + Value)"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentScope.Enabled" Type="Boolean">
      <Parameters>
        <Parameter Identifier="HWTraceType" Type="TTraceType"/>
      </Parameters>
      <Getter>
        <Execute Statement="WriteString(HWTraceTypeVid(HWTraceType) + cTRACEQuery)"/>
        <Execute Statement="Result:= ReadOnOff"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteOnOff(HWTraceTypeVid(HWTraceType) + cTRACECommand, Value)"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentScope.BandwidthLimit" Type="Boolean">
      <Parameters>
        <Parameter Identifier="Channel" Type="TChannelType"/>
      </Parameters>
      <Getter>
        <Execute Statement="WriteString(cBANDWIDTH_LIMITQuery)"/>
        <Variable Identifier="RetValue" Type="viString" Init="ReadString"/>
        <Execute Statement="Result:= False"/>
        <Variable Identifier="CurrentChannel" Type="TChannelType"/>
        <Variable Identifier="ValidEndstate" Type="Boolean" Init="False"/>
        <!-- C1,ON,C2,OFF,C3,OFF,C4,OFF -->
        <stm:StateHandler InitialState="ChannelExpected">
          <StringLoop StringValue="RetValue" Ansi="1" OrdinalIdentifier="ChrI">
            <stm:HandleStates>
              <stm:State Name="ChannelExpected">
                <Case Expression="ChrI" OrdinalType="ansichar">
                  <On Select="' '"/>
                  <On Select="'C'">
                    <stm:SetState Name="InChannelParam"/>
                  </On>
                  <Otherwise>
                    <Raise Expression="Exception.Create(sErrorUnsupportedBandWidthAnswer)"/>
                  </Otherwise>
                </Case>
              </stm:State>
              <stm:State Name="InChannelParam">
                <Case Expression="ChrI" OrdinalType="ansichar">
                  <On Select="'1'">
                    <Execute Statement="CurrentChannel:= TChannelType.CH1"/>
                    <stm:SetState Name="AfterChannelParam"/>
                  </On>
                  <On Select="'2'">
                    <Execute Statement="CurrentChannel:= TChannelType.CH2"/>
                    <stm:SetState Name="AfterChannelParam"/>
                  </On>
                  <On Select="'3'">
                    <Execute Statement="CurrentChannel:= TChannelType.CH3"/>
                    <stm:SetState Name="AfterChannelParam"/>
                  </On>
                  <On Select="'4'">
                    <Execute Statement="CurrentChannel:= TChannelType.CH4"/>
                    <stm:SetState Name="AfterChannelParam"/>
                  </On>
                  <Otherwise>
                    <Break/>
                  </Otherwise>
                </Case>
              </stm:State>
              <stm:State Name="AfterChannelParam">
                <Case Expression="ChrI" OrdinalType="ansichar">
                  <On Select="' '">
                  </On>
                  <On Select="','">
                    <stm:SetState Name="AfterStateParamStart"/>
                  </On>
                  <Otherwise>
                    <Break/>
                  </Otherwise>
                </Case>
              </stm:State>
              <stm:State Name="AfterStateParamStart">
                <Case Expression="ChrI" OrdinalType="ansichar">
                  <On Select="' '">
                  </On>
                  <On Select="'o', 'O'">
                    <stm:SetState Name="AfterStateParamO"/>
                  </On>
                  <Otherwise>
                    <Break/>
                  </Otherwise>
                </Case>
              </stm:State>
              <stm:State Name="AfterStateParamO">
                <Case Expression="ChrI" OrdinalType="ansichar">
                  <On Select="'f', 'F'">
                    <stm:SetState Name="AfterStateParamF"/>
                  </On>
                  <On Select="'n', 'N'">
                    <stm:SetState Name="AfterStateDone"/>
                    <Execute Statement="Result:= True" Condition="CurrentChannel = Channel"/>
                    <Execute Statement="ValidEndstate:= True"/>
                  </On>
                  <Otherwise>
                    <Break/>
                  </Otherwise>
                </Case>
              </stm:State>
              <stm:State Name="AfterStateParamF">
                <Case Expression="ChrI" OrdinalType="ansichar">
                  <On Select="'f', 'F'">
                    <stm:SetState Name="AfterStateDone"/>
                    <Execute Statement="Result:= False" Condition="CurrentChannel = Channel"/>
                    <Execute Statement="ValidEndstate:= True"/>
                  </On>
                  <Otherwise>
                    <Break/>
                  </Otherwise>
                </Case>
              </stm:State>
              <stm:State Name="AfterStateDone">
                <Case Expression="ChrI" OrdinalType="ansichar">
                  <On Select="' '">
                  </On>
                  <On Select="','">
                    <stm:SetState Name="ChannelExpected"/>
                    <Execute Statement="ValidEndstate:= False"/>
                  </On>
                  <Otherwise>
                    <Break/>
                  </Otherwise>
                </Case>
              </stm:State>
            </stm:HandleStates>
          </StringLoop>
        </stm:StateHandler>
        <Raise Expression="Exception.Create(sErrorUnsupportedBandWidthAnswer + RetValue)" Condition="not ValidEndstate"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteOnOff(cBANDWIDTH_LIMITCommand + ChannelTypeVid(Channel) + viParamSep, Value)"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentScope.HistoryMode" Type="Boolean">
      <Getter>
        <Execute Statement="WriteString(cHISTORY_MODEQuery)"/>
        <Execute Statement="Result:= ReadOnOff"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteOnOff(cHISTORY_MODECommand, Value)"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentScope.SequenceMode" Type="Boolean">
      <Getter>
        <Execute Statement="WriteString('ACquire_SeQuence_Mode')"/>
        <Execute Statement="Result:= ReadOnOff"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteOnOff('ACquire_SeQuence_Mode', Value)"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentScope.ServiceRequestMask" Type="TDsoSTBFlag">
      <Getter>
        <Execute Statement="Result:= QueryUInt32(cServiceRequestMaskQuery)"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteString(ViFormat(cServiceRequestMaskCommand, Value))"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentScope.ActiveFrame" Type="UInt32" >
      <Getter>
        <Execute Statement="WriteString('FRAME_SET?')"/>
        <Execute Statement="Result:= ReadInt64"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteInt64('FRAME_SET', Value)"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentScope.SegmentCount" Type="UInt32" >
      <Getter>
        <Execute Statement="WriteString('ACquire_SeQuence_Seg?')"/>
        <Execute Statement="Result:= ReadInt64"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteInt64('ACquire_SeQuence_Seg', Value)"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentScope.TriggerMode" Type="TTriggerMode" >
      <Getter>
        <Execute Statement="Result:= TriggerModeFromVid(QueryString(cTRIG_MODEQuery))"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteString(cTRIG_MODECommand + TriggerModeVid(Value))"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentScope.MathVDiv" Type="Extended" >
      <Getter>
        <Execute Statement="Result:= QueryFloat(cMATH_VERT_DIVQuery)"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteString(cMATH_VERT_DIVCommand + FloatToCode(Value))"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentScope.ConvMathVDiv" Type="ConvInt" >
      <Getter>
        <Execute Statement="Result:= QueryConvInt(cMATH_VERT_DIVQuery, ucMathVDiv)"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteString(cMATH_VERT_DIVCommand + ucMathVDiv.IntValueToEngineeringStr(Value, TUnitPostFix.None, viDecimalSeperatior))"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentScope.MathVPosition" Type="Extended" >
      <Getter>
        <Execute Statement="Result:= QueryFloat(cMATH_VERT_POSQuery)"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteString(cMATH_VERT_POSCommand + FloatToCode(Value))"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentScope.ConvMathVPosition" Type="ConvInt" >
      <Getter>
        <Execute Statement="Result:= QueryConvInt(cMATH_VERT_POSQuery, ucMathVPosition)"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteString(cMATH_VERT_POSCommand + ucMathVPosition.IntValueToEngineeringStr(Value, TUnitPostFix.None, viDecimalSeperatior))"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentScope.TriggerDelay" Type="Extended" >
      <Getter>
        <Execute Statement="Result:= QueryFloat(cTRIG_DELAYQuery)"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteString(cTRIG_DELAYCommand + FloatToCode(Value))"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentScope.ConvTriggerDelay" Type="ConvInt" >
      <Getter>
        <Execute Statement="Result:= QueryConvInt(cTRIG_DELAYQuery, ucTriggerDelay)"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteString(cTRIG_DELAYCommand + ucTriggerDelay.IntValueToEngineeringStr(Value, TUnitPostFix.None, viDecimalSeperatior))"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentScope.TDiv" Type="Extended" >
      <Getter>
        <Variable Identifier="ValueS" Type="ViString" Init="QueryString(cTIME_DIVQuery)"/>
        <Execute Statement="Result:= CodeToFloat(ValueS)"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteString(cTIME_DIVCommand + FloatToCode(Value))"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentScope.ConvTDiv" Type="ConvInt" >
      <Getter>
        <Execute Statement="Result:= QueryConvInt(cTIME_DIVQuery, ucTDiv)"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteString(cTIME_DIVCommand + ucTDiv.IntValueToEngineeringStr(Value, TUnitPostFix.None, viDecimalSeperatior))"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentScope.VDiv" Type="Extended" >
      <Parameters>
        <Parameter Identifier="Channel" Type="TChannelType"/>
      </Parameters>
      <Getter>
        <Execute Statement="Result:= QueryFloat(ChannelTypeVid(Channel) + cVOLT_DIVQuery)"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteString(ChannelTypeVid(Channel) + cVOLT_DIVCommand + FloatToCode(Value))"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentScope.ConvVDiv" Type="ConvInt" >
      <Parameters>
        <Parameter Identifier="Channel" Type="TChannelType"/>
      </Parameters>
      <Getter>
        <Execute Statement="Result:= QueryConvInt(ChannelTypeVid(Channel) + cVOLT_DIVQuery, ucVDiv)"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteString(ChannelTypeVid(Channel) + cVOLT_DIVCommand + ucVDiv.IntValueToEngineeringStr(Value, TUnitPostFix.None, viDecimalSeperatior))"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentScope.VOffset" Type="Extended" >
      <Parameters>
        <Parameter Identifier="Channel" Type="TChannelType"/>
      </Parameters>
      <Getter>
        <Execute Statement="Result:= QueryFloat(ChannelTypeVid(Channel) + cVOFFSETQuery)"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteString(ChannelTypeVid(Channel) + cVOFFSETCommand + FloatToCode(Value))"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentScope.ConvVOffset" Type="ConvInt" >
      <Parameters>
        <Parameter Identifier="Channel" Type="TChannelType"/>
      </Parameters>
      <Getter>
        <Execute Statement="Result:= QueryConvInt(ChannelTypeVid(Channel) + cVOFFSETQuery, ucVOffset)"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteString(ChannelTypeVid(Channel) + cVOFFSETCommand + ucVOffset.IntValueToEngineeringStr(Value, TUnitPostFix.None, viDecimalSeperatior))"/>
      </Setter>
    </Property>

    <!--0.1,0.2,0.5,1,2,5,10,20,50,100,200,500,1000,2000,5000,10000-->
    <Property Identifier="TSiglentScope.Attenuation" Type="Extended">
      <Parameters>
        <Parameter Identifier="Channel" Type="TChannelType"/>
      </Parameters>
      <Getter>
        <Execute Statement="Result:= QueryFloat(ChannelTypeVid(Channel) + cATTENUATIONQuery)"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteString(ChannelTypeVid(Channel) + cATTENUATIONCommand + FloatToCode(Value))"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentScope.ConvAttenuation" Type="ConvInt" >
      <Parameters>
        <Parameter Identifier="Channel" Type="TChannelType"/>
      </Parameters>
      <Getter>
        <Execute Statement="Result:= QueryConvInt(ChannelTypeVid(Channel) + cATTENUATIONQuery, ucAttenuation)"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteString(ChannelTypeVid(Channel) + cATTENUATIONCommand + ucAttenuation.IntValueToEngineeringStr(Value, TUnitPostFix.None, viDecimalSeperatior))"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentScope.SampleRate" Type="Extended" >
      <Getter>
        <Execute Statement="Result:= QueryFloat(cSARAQuery)"/>
      </Getter>
    </Property>

    <Procedure Identifier="TSiglentScope.SetConvTriggerLevel">
      <Parameters>
        <Parameter Identifier="Channel" Type="TChannelType"/>
        <Parameter Identifier="Value" Type="ConvInt"/>
      </Parameters>
      <Block>
        <Execute Statement="WriteString(ChannelTypeVid(Channel) + cTRIG_LEVELCommand + ucTriggerLevel.IntValueToEngineeringStr(Value, TUnitPostFix.None, viDecimalSeperatior))"/>
      </Block>
    </Procedure>

    <Procedure Identifier="TSiglentScope.SetTriggerLevel">
      <Parameters>
        <Parameter Identifier="Channel" Type="TChannelType"/>
        <Parameter Identifier="Value" Type="Extended"/>
      </Parameters>
      <Block>
        <Execute Statement="WriteString(ChannelTypeVid(Channel) + cTRIG_LEVELCommand + FloatToCode(Value))"/>
      </Block>
    </Procedure>

    <Procedure Identifier="TSiglentScope.SetTriggerSlope">
      <Parameters>
        <Parameter Identifier="Channel" Type="TChannelType"/>
        <Parameter Identifier="Value" Type="ViString"/>
      </Parameters>
      <Block>
        <Execute Statement="WriteString(ChannelTypeVid(Channel) + cTRIG_SLOPECommand + Value)"/>
      </Block>
    </Procedure>

    <Procedure Identifier="TSiglentScope.ScreenCapureToFile">
      <Parameters>
        <Parameter Identifier="Filename" Type="string"/>
        <Parameter Identifier="ImageType" Type="TImageType"/>
      </Parameters>
      <Block>
        <Execute Statement="WriteString(cSCDPCommand)"/>
        <Object.Use Identifier="BlobStream" Type="TMemoryStream" Expression="ReadBlob(cScreenCapureBlobSize)">
          <Case Expression="ImageType">
            <On Select="TImageType.BMP">
              <Execute Statement="BlobStream.SaveToFile(Filename)"/>
            </On>
            <On Select="TImageType.PNG">
              <Object.Use Identifier="BMPObj" Type="TBitmap" Expression="TBitmap.Create">
                <Execute Statement="BMPObj.LoadFromStream(BlobStream)"/>
                <Object.Use Identifier="PNGObj" Type="TPngImage" Expression="TPngImage.Create">
                  <Execute Statement="PNGObj.Assign(BMPObj)"/>
                  <Execute Statement="PNGObj.SaveToFile(Filename)"/>
                </Object.Use>
              </Object.Use>
            </On>
          </Case>
        </Object.Use>
      </Block>
    </Procedure>

    <Procedure Identifier="TSiglentScope.Wait">
      <Block>
        <Variable Identifier="SaveTimout" Type="UInt32" Init="VisaResource.Timeout"/>
        <Execute Statement="VisaResource.Timeout:= VI_TMO_INFINITE"/>
        <TryFinally>
          <Try>
            <Execute Statement="WriteString(cWaitCommand)"/>
          </Try>
          <Finally>
            <Execute Statement="VisaResource.Timeout:= SaveTimout"/>
          </Finally>
        </TryFinally>
      </Block>
    </Procedure>

    <Procedure Identifier="TSiglentScope.Wait">
      <Parameters>
        <Parameter Identifier="Time" Type="Extended"/>
      </Parameters>
      <Block>
        <Variable Identifier="SaveTimout" Type="UInt32" Init="VisaResource.Timeout"/>
        <Execute Statement="VisaResource.Timeout:= Round(1000 * Time) + 300"/>
        <TryFinally>
          <Try>
            <Execute Statement="WriteString(cWaitTimeoutCommand + FloatToCode(Time))"/>
          </Try>
          <Finally>
            <Execute Statement="VisaResource.Timeout:= SaveTimout"/>
          </Finally>
        </TryFinally>
      </Block>
    </Procedure>


    <Procedure Identifier="TSiglentScope.SaveWaveToFile">
      <Parameters>
        <Parameter Identifier="Filename" Type="string"/>
        <Parameter Identifier="Wave" Type="ViString"/>
      </Parameters>
      <Block>
        <Execute Statement="WriteString(cWVDTQuery + Wave)"/>
        <Object.Use Identifier="BlobStream" Type="TMemoryStream" Expression="ReadBlob(cWaveBlobSize)">
          <Execute Statement="BlobStream.SaveToFile(Filename)"/>
        </Object.Use>
      </Block>
    </Procedure>

    <Function Identifier="TSiglentScope.WaveForm" Type="TMemoryStream">
      <Parameters>
        <Parameter Identifier="Trace" Type="TTraceType"/>
      </Parameters>
      <Block>
        <Execute Statement="WriteString(TraceTypeVid(Trace) + cWAVEFORMQuery + cWAVEFORM_DAT2)"/>
        <Variable Identifier="SaveTimout" Type="UInt32" Init="VisaResource.Timeout"/>
        <Execute Statement="VisaResource.Timeout:= cWaveCaptureTimeout"/>
        <TryFinally>
          <Try>
            <Execute Statement="Result:= ReadBlob(cWaveBlobSize)"/>
          </Try>
          <Finally>
            <Execute Statement="VisaResource.Timeout:= SaveTimout"/>
          </Finally>
        </TryFinally>
      </Block>
    </Function>

    <Procedure Identifier="TSiglentScope.WaveSetup">
      <Parameters>
        <Parameter Identifier="Segment" Type="Integer"/>
        <Parameter Identifier="LimitSamples" Type="Integer"/>
      </Parameters>
      <Block>
        <Execute Statement="WriteString(cWAVEFORM_SETUPTYPE1Command)"/>
        <Execute Statement="WriteString(ViFormat(cWAVEFORM_SETUPCommand, 1, LimitSamples, 0, 0))"/>
      </Block>
    </Procedure>

    <Function Identifier="TSiglentScope.WaveForm" Type="TMemoryStream">
      <Parameters>
        <Parameter Identifier="Trace" Type="TTraceType"/>
        <Parameter Identifier="Segment" Type="Integer"/>
        <Parameter Identifier="WaveFormat" Type="TWaveFormFormat"/>
      </Parameters>
      <Block>
        <Variable Identifier="SegmentStr" Type="ViString" Init="''"/>
        <Block Condition="Segment &gt; 0">
          <Execute Statement="ActiveFrame:= Segment"/>
          <Execute Statement="SegmentStr:= ViFormat(' segment %d', Segment)"/>
        </Block>
        <Case Expression="WaveFormat">
          <On Select="TWaveFormFormat.Dat2">
            <Execute Statement="WriteString(TraceTypeVid(Trace) + cWAVEFORMQuery + cWAVEFORM_DAT2)"/>
          </On>
          <On Select="TWaveFormFormat.All">
            <Execute Statement="WriteString(TraceTypeVid(Trace) + cWAVEFORMQuery + cWAVEFORM_ALL)"/>
          </On>
          <Otherwise>
            <Raise Expression="Exception.Create(sErrorWaveFormFormat)"/>
          </Otherwise>
        </Case>
        <Variable Identifier="TraceName" Type="ViString" Init="TraceTypeName(Trace)"/>
        <sts:Status.Block Text="Format('Reading waveform %s%s', TraceName, SegmentStr)" LeaveText="Format('Done reading waveform %s%s', TraceName, SegmentStr)">
          <Variable Identifier="SaveTimout" Type="UInt32" Init="VisaResource.Timeout"/>
          <Execute Statement="VisaResource.Timeout:= cWaveCaptureTimeout"/>
          <TryFinally>
            <Try>
              <Execute Statement="Result:= ReadBlob(cWaveBlobSize)"/>
            </Try>
            <Finally>
              <Execute Statement="VisaResource.Timeout:= SaveTimout"/>
            </Finally>
          </TryFinally>
        </sts:Status.Block>
      </Block>
    </Function>

    <Procedure Identifier="LoadSamplesFromStream">
      <Parameters>
        <Parameter Identifier="AcquisitionInfo" Type="TAcquisitionInfo"/>
        <Parameter Identifier="Stream" Type="TStream"/>
        <Parameter Identifier="LimitSamples" Type="Int32"/>
      </Parameters>
      <Type>
        <Enumeration Identifier="TProcessKind" Elements="MultiFrameInitial, MutiFrameUpdate, SingleSum, Samples"/>
      </Type>
      <Variables>
        <Variable Identifier="ProcessKind" Type="TProcessKind"/>
        <Variable Identifier="WaveForm" Type="TWaveFormFormat"/>
        <Variable Identifier="FloatValue" Type="Extended"/>
        <Variable Identifier="TimePerSample" Type="Extended"/>
        <Variable Identifier="ProbeAttenuation" Type="Extended"/>
        <Variable Identifier="BlockStart" Type="Int32"/>
        <Variable Identifier="NumberOfPoints" Type="Int32"/>
        <Variable Identifier="DescriptionBlockSize" Type="UInt32"/>
        <Variable Identifier="BlockSize" Type="UInt32"/>
        <Variable Identifier="BlockSizeCount" Type="Int32"/>
        <Variable Identifier="Int32Data" Type="Int32"/>
        <Variable Identifier="UInt32Data" Type="UInt32"/>
        <Variable Identifier="AnsiData" Type="AnsiChar"/>
        <Variable Identifier="FormatS" Type="ViString"/>
        <Variable Identifier="RawElement" Type="Int32"/>
        <Variable Identifier="ActiveDataPoint" Type="TSamplePoint"/>
        <Variable Identifier="SamplePointManager" Type="TSamplePointManager"/>
        <Variable Identifier="SingleSample" Type="TSamplePoint32"/>
        <Variable Identifier="PointsPerScreen" Type="Int32"/>
        <Variable Identifier="Samples" Type="TListInt8"/>
      </Variables>
      <Block>
        <Choose>
          <When Expression="AcquisitionInfo is TMultiFrameAcquisitionInfo">
            <Execute Statement="SamplePointManager:= TMultiFrameAcquisitionInfo(AcquisitionInfo).SamplePointManager"/>
            <Choose>
              <When Expression="TMultiFrameAcquisitionInfo(AcquisitionInfo).Initial">
                <Execute Statement="ProcessKind:= TProcessKind.MultiFrameInitial"/>
              </When>
              <Otherwise>
                <Execute Statement="ProcessKind:= TProcessKind.MutiFrameUpdate"/>
                <Execute Statement="ActiveDataPoint:= SamplePointManager.SampleHead"/>
              </Otherwise>
            </Choose>
          </When>
          <When Expression="AcquisitionInfo is TSamplesAcquisitionInfo">
            <Execute Statement="ProcessKind:= TProcessKind.Samples"/>
            <Execute Statement="Samples:= TSamplesAcquisitionInfo(AcquisitionInfo).Samples"/>
          </When>
          <When Expression="AcquisitionInfo is TSingleSummedSampleAcquisitionInfo">
            <Execute Statement="ProcessKind:= TProcessKind.SingleSum"/>
            <Execute Statement="SingleSample:= TSingleSummedSampleAcquisitionInfo(AcquisitionInfo).Sample"/>
          </When>
          <Otherwise>
            <Raise Expression="Exception.Create(sErrorUnsupportedAcquisitionType)"/>
          </Otherwise>
        </Choose>
        <Execute Statement="Stream.Position:= 0"/>
        <stm:StateHandler InitialState="Start">
          <WhileLoop Expression="Stream.Position &lt; Stream.Size">
            <ExitOnAbortRequest/>
            <stm:HandleStates>
              <stm:State Name="Start">
                <Raise Condition="Stream.ReadDataAnsiChar(AnsiData) &lt;&gt; 1 " Expression="Exception.Create(sErrorReadingHeader)"/>
                <Case Expression="CharOrd(AnsiData)" OrdinalType="ansichar" Optimalisation="integermapping">
                  <On Select="'A'..'Z'">
                    <Execute Statement="FormatS:= AnsiData"/>
                    <stm:SetState Name="InTrace" />
                  </On>
                  <Otherwise>
                    <Raise Expression="Exception.Create(sErrorHeaderParsing)"/>
                  </Otherwise>
                </Case>
              </stm:State>
              <stm:State Name="InTrace">
                <Raise Condition="Stream.ReadDataAnsiChar(AnsiData) &lt;&gt; 1 " Expression="Exception.Create(sErrorReadingHeader)"/>
                <Case Expression="CharOrd(AnsiData)" OrdinalType="ansichar" Optimalisation="integermapping">
                  <On Select="'A'..'Z', '0'..'9'">
                    <Execute Statement="FormatS:= FormatS + AnsiData"/>
                  </On>
                  <On Select="','">
                    <rep:Reporter.Information Text="Format('WaveFormat: %s', FormatS)" Target="Visa" Condition="DoReportVisa"/>
                    <Choose>
                      <When Expression="FormatS = 'DAT2'">
                        <Execute Statement="WaveForm:= TWaveFormFormat.Dat2"/>
                      </When>
                      <When Expression="FormatS = 'ALL'">
                        <Execute Statement="WaveForm:= TWaveFormFormat.All"/>
                      </When>
                      <Otherwise>
                        <Raise Expression="Exception.Create(sErrorHeaderParsing)"/>
                      </Otherwise>
                    </Choose>
                    <stm:SetState Name="SearchDash" />
                  </On>
                  <Otherwise>
                    <Raise Expression="Exception.Create(sErrorHeaderParsing)"/>
                  </Otherwise>
                </Case>
              </stm:State>
              <stm:State Name="SearchDash">
                <!--<rep:Reporter.Information Text="'SearchDash'" Target="Visa" Condition="DoReportVisa"/>-->
                <Raise Condition="Stream.ReadDataAnsiChar(AnsiData) &lt;&gt; 1 " Expression="Exception.Create(sErrorReadingHeader)"/>
                <Case Expression="CharOrd(AnsiData)" OrdinalType="ansichar" Optimalisation="integermapping">
                  <On Select="'#'">
                    <stm:SetState Name="SearchNine" />
                  </On>
                </Case>
              </stm:State>
              <stm:State Name="SearchNine">
                <!--<rep:Reporter.Information Text="'SearchNine'" Target="Visa" Condition="DoReportVisa"/>-->
                <Raise Condition="Stream.ReadDataAnsiChar(AnsiData) &lt;&gt; 1 " Expression="Exception.Create(sErrorReadingHeader)"/>
                <Case Expression="CharOrd(AnsiData)" OrdinalType="ansichar" Optimalisation="integermapping">
                  <On Select="'9'">
                    <stm:SetState Name="InSucceedingBlockSize" />
                    <Execute Statement="BlockSizeCount:= 0"/>
                    <Execute Statement="BlockSize:= 0"/>
                  </On>
                </Case>
              </stm:State>
              <stm:State Name="InSucceedingBlockSize">
                <Raise Condition="Stream.ReadDataAnsiChar(AnsiData) &lt;&gt; 1 " Expression="Exception.Create(sErrorReadingWaveLength)"/>
                <Execute Statement="BlockSizeCount:= BlockSizeCount + 1"/>
                <Case Expression="CharOrd(AnsiData)" OrdinalType="ansichar" Optimalisation="integermapping">
                  <On Select="'0'..'9'">
                    <Execute Statement="BlockSize:= BlockSize * 10 + (CharOrd(AnsiData) - ordC0)"/>
                  </On>
                  <Otherwise>
                    <Raise Expression="Exception.Create(sErrorHeaderParsing)"/>
                  </Otherwise>
                </Case>
                <Block Condition="BlockSizeCount = 9">
                  <Execute Statement="BlockStart:= Stream.Position"/>
                  <Case Expression="WaveForm">
                    <On Select="TWaveFormFormat.Dat2">
                      <Execute Statement="NumberOfPoints:= BlockSize"/>
                      <Raise Expression="Exception.Create(sInvalidInitialWaveformat)" Condition="ProcessKind &lt;&gt; TProcessKind.MutiFrameUpdate"/>
                    </On>
                    <On Select="TWaveFormFormat.All">
                      <Execute Statement="Stream.Position:= BlockStart + coDescriptionBlockSizeOffset"/>
                      <Raise Condition="Stream.ReadDataUInt16(DescriptionBlockSize) &lt;&gt; 2" Expression="Exception.Create(sErrorReadingWaveData)"/>
                      <rep:Reporter.Information Text="Format('DescriptionBlockSize: %d', DescriptionBlockSize)" Target="Visa" Condition="DoReportVisa"/>
                      <Block Condition="ProcessKind &lt;&gt; TProcessKind.MutiFrameUpdate">
                        <rep:Reporter.Information Text="Format('BlockStart: %d', BlockStart)" Target="Visa" Condition="DoReportVisa"/>


                        <Execute Statement="Stream.Position:= BlockStart + coNumberOfPointsOffset"/>
                        <Raise Condition="Stream.ReadDataUInt32(NumberOfPoints) &lt;&gt; 4" Expression="Exception.Create(sErrorReadingWaveData)"/>
                        <rep:Reporter.Information Text="Format('Nr. of points: %d', NumberOfPoints)" Target="Visa" Condition="DoReportVisa"/>

                        <Execute Statement="Stream.Position:= BlockStart + coWaveSizeOffset"/>
                        <Raise Condition="Stream.ReadDataUInt32(UInt32Data) &lt;&gt; 4" Expression="Exception.Create(sErrorReadingWaveData)"/>
                        <rep:Reporter.Information Text="Format('WaveSize: %d', UInt32Data)" Target="Visa" Condition="DoReportVisa"/>

                        <Execute Statement="Stream.Position:= BlockStart + coPointsPerScreen"/>
                        <Raise Condition="Stream.ReadDataInt32(PointsPerScreen) &lt;&gt; 4" Expression="Exception.Create(sErrorReadingWaveData)"/>
                        <rep:Reporter.Information Text="Format('PointsPerScreen: %d', PointsPerScreen)" Target="Visa" Condition="DoReportVisa"/>

                        <Execute Statement="Stream.Position:= BlockStart + coFirstValidPntOffset"/>
                        <Raise Condition="Stream.ReadDataInt32(UInt32Data) &lt;&gt; 4" Expression="Exception.Create(sErrorReadingWaveData)"/>
                        <rep:Reporter.Information Text="Format('FirstValidPnt: %d', UInt32Data)" Target="Visa" Condition="DoReportVisa"/>

                        <Execute Statement="Stream.Position:= BlockStart + coLastValidPntOffset"/>
                        <Raise Condition="Stream.ReadDataInt32(UInt32Data) &lt;&gt; 4" Expression="Exception.Create(sErrorReadingWaveData)"/>
                        <rep:Reporter.Information Text="Format('LastValidPnt: %d', UInt32Data)" Target="Visa" Condition="DoReportVisa"/>

                        <Execute Statement="Stream.Position:= BlockStart + coVUnitOffset"/>
                        <Raise Condition="Stream.ReadDataAnsiChar(AnsiData) &lt;&gt; 1" Expression="Exception.Create(sErrorReadingWaveData)"/>
                        <Execute Statement="AcquisitionInfo.VUnit:= AnsiData"/>
                        <rep:Reporter.Information Text="Format('VUnit: %s', AnsiData)" Target="Visa" Condition="DoReportVisa"/>

                        <Execute Statement="Stream.Position:= BlockStart + coProbeAttenuationOffset"/>
                        <Raise Condition="Stream.ReadDataSingle(ProbeAttenuation) &lt;&gt; 4" Expression="Exception.Create(sErrorReadingWaveData)"/>
                        <Execute Statement="AcquisitionInfo.ProbeAttenuation:= ProbeAttenuation"/>
                        <rep:Reporter.Information Text="Format('ProbeAttenuation: %g', ProbeAttenuation)" Target="Visa" Condition="DoReportVisa"/>

                        <Execute Statement="Stream.Position:= BlockStart + coVerticalGainOffset"/>
                        <Raise Condition="Stream.ReadDataSingle(FloatValue) &lt;&gt; 4" Expression="Exception.Create(sErrorReadingWaveData)"/>
                        <rep:Reporter.Information Text="Format('VerticalGain: %g', FloatValue)" Target="Visa" Condition="DoReportVisa"/>
                        <Execute Statement="FloatValue:= FloatValue * ProbeAttenuation"/>
                        <Execute Statement="AcquisitionInfo.VDiv:= FloatValue"/>
                        <Execute Statement="AcquisitionInfo.VFactor:= FloatValue * cVGran"/>

                        <Execute Statement="Stream.Position:= BlockStart + coVerticalOffsetOffset"/>
                        <Raise Condition="Stream.ReadDataSingle(FloatValue) &lt;&gt; 4" Expression="Exception.Create(sErrorReadingWaveData)"/>
                        <rep:Reporter.Information Text="Format('VerticalOffset: %g', FloatValue)" Target="Visa" Condition="DoReportVisa"/>
                        <Execute Statement="AcquisitionInfo.VOffset:= -FloatValue * ProbeAttenuation"/>

                        <Execute Statement="Stream.Position:= BlockStart + coHorizontalIntervalOffset"/>
                        <Raise Condition="Stream.ReadDataSingle(TimePerSample) &lt;&gt; 4" Expression="Exception.Create(sErrorReadingWaveData)"/>
                        <rep:Reporter.Information Text="Format('HorizontalInterval: %g', TimePerSample)" Target="Visa" Condition="DoReportVisa"/>
                        <Execute Statement="AcquisitionInfo.HDiv:= TimePerSample * PointsPerScreen / cHDivisions"/>
                        <Execute Statement="AcquisitionInfo.TimePerSample:= TimePerSample"/>

                        <Execute Statement="Stream.Position:= BlockStart + coHorizontalOffsetOffset"/>
                        <Raise Condition="Stream.ReadDataDouble(FloatValue) &lt;&gt; 8" Expression="Exception.Create(sErrorReadingWaveData)"/>
                        <rep:Reporter.Information Text="Format('HorizontalOffset: %g', FloatValue)" Target="Visa" Condition="DoReportVisa"/>
                        <Execute Statement="AcquisitionInfo.Time:= FloatValue - PointsPerScreen * TimePerSample * 0.5"/>
                        <Execute Statement="AcquisitionInfo.HOffset:= FloatValue"/>

                        <Execute Statement="Stream.Position:= BlockStart + coSegmentIndexOffset"/>
                        <Raise Condition="Stream.ReadDataInt32(Int32Data) &lt;&gt; 4" Expression="Exception.Create(sErrorReadingWaveData)"/>
                        <rep:Reporter.Information Text="Format('SegmentIndex: %d', Int32Data)" Target="Visa" Condition="DoReportVisa"/>

                        <Execute Statement="Stream.Position:= BlockStart + coNominalBitsOffset"/>
                        <Raise Condition="Stream.ReadDataUInt16(UInt32Data) &lt;&gt; 2" Expression="Exception.Create(sErrorReadingWaveData)"/>
                        <rep:Reporter.Information Text="Format('NominalBits: %d', UInt32Data)" Target="Visa" Condition="DoReportVisa"/>
                      </Block>
                      <Execute Statement="Stream.Position:= BlockStart + DescriptionBlockSize"/>
                    </On>
                    <Otherwise>
                      <Raise Expression="Exception.Create(sErrorWaveFormFormat)"/>
                    </Otherwise>
                  </Case>
                  <Case Expression="ProcessKind" Optimalisation="integermapping">
                    <On Select="TProcessKind.MultiFrameInitial">
                      <Execute Statement="NumberOfPoints:= LimitSamples" Condition="(LimitSamples &gt; 0) and (LimitSamples &lt; NumberOfPoints)"/>
                      <rep:Reporter.Information Text="Format('NumberOfPoints: %d', NumberOfPoints)" Target="Visa" Condition="DoReportVisa"/>
                      <Execute Statement="TMultiFrameAcquisitionInfo(AcquisitionInfo).Initial:= False"/>
                      <stm:SetState Name="WaveDataCreateDataPoints"/>
                    </On>
                    <On Select="TProcessKind.MutiFrameUpdate">
                      <stm:SetState Name="WaveDataUpdateDataPoints"/>
                    </On>
                    <On Select="TProcessKind.SingleSum">
                      <Execute Statement="NumberOfPoints:= LimitSamples" Condition="(LimitSamples &gt; 0) and (LimitSamples &lt; NumberOfPoints)"/>
                      <rep:Reporter.Information Text="Format('NumberOfPoints: %d', NumberOfPoints)" Target="Visa" Condition="DoReportVisa"/>
                      <stm:SetState Name="WaveDataUpdateSingleSample"/>
                    </On>
                    <On Select="TProcessKind.Samples">
                      <Execute Statement="NumberOfPoints:= LimitSamples" Condition="(LimitSamples &gt; 0) and (LimitSamples &lt; NumberOfPoints)"/>
                      <rep:Reporter.Information Text="Format('NumberOfPoints: %d', NumberOfPoints)" Target="Visa" Condition="DoReportVisa"/>
                      <Execute Statement="Samples.AddFromStream(Stream, NumberOfPoints)"/>
                      <stm:SetState Name="Done"/>
                    </On>
                  </Case>
                </Block>
              </stm:State>
              <stm:State Name="WaveDataCreateDataPoints">
                <Raise Condition="Stream.ReadDataInt8(RawElement) &lt;&gt; 1 " Expression="Exception.Create(sErrorReadingWaveData)"/>
                <Execute Statement="ActiveDataPoint:= SamplePointManager.NewPoint"/>
                <Execute Statement="ActiveDataPoint.Add(RawElement)"/>
                <Execute Statement="NumberOfPoints:= NumberOfPoints - 1"/>
                <stm:SetState Name="Done" Condition="NumberOfPoints = 0"/>
              </stm:State>
              <stm:State Name="WaveDataUpdateDataPoints">
                <Raise Condition="Stream.ReadDataInt8(RawElement) &lt;&gt; 1 " Expression="Exception.Create(sErrorReadingWaveData)"/>
                <Execute Statement="ActiveDataPoint.Add(RawElement)"/>
                <Execute Statement="ActiveDataPoint:= ActiveDataPoint.Next"/>
                <stm:SetState Name="Done" Condition="not Assigned(ActiveDataPoint)"/>
              </stm:State>
              <stm:State Name="WaveDataUpdateSingleSample">
                <Raise Condition="Stream.ReadDataInt8(RawElement) &lt;&gt; 1 " Expression="Exception.Create(sErrorReadingWaveData)"/>
                <Execute Statement="SingleSample.Add(RawElement)"/>
                <Execute Statement="NumberOfPoints:= NumberOfPoints - 1"/>
                <stm:SetState Name="Done" Condition="NumberOfPoints = 0"/>
              </stm:State>
              <stm:State Name="Done">
                <Execute Statement="Stream.Position:= Stream.Size"/>
              </stm:State>
            </stm:HandleStates>
          </WhileLoop>
        </stm:StateHandler>
      </Block>
    </Procedure>

    <Function Identifier="TSiglentScope.GetMultiFrameSamples" Type="TMultiFrameAcquisitionInfo">
      <Parameters>
        <Parameter Identifier="Trace" Type="TTraceType"/>
        <Parameter Identifier="FrameHighIndex" Type="Int64"/>
        <Parameter Identifier="Options" Type="TMultiFrameAcquisitionOptions"/>
      </Parameters>
      <Variables>
        <Variable Identifier="LimitSamples" Type="Int32" Init="0"/>
        <Variable Identifier="WaveFormFormat" Type="TWaveFormFormat" Init="TWaveFormFormat.All"/>
      </Variables>
      <Block>
        <Variable Identifier="TraceName" Type="string" Init="TraceTypeName(Trace)"/>
        <sts:Status.Block Text="Format('Capturing %s in %d segments', TraceName, FrameHighIndex)" LeaveText="Format('Done capturing %s in %d segments', TraceName, FrameHighIndex)">
          <Execute Statement="Result:= TMultiFrameAcquisitionInfo.Create"/>
          <Block Condition="Assigned(Options)">
            <Execute Statement="LimitSamples:= Options.LimitSamples"/>
          </Block>
          <Execute Statement="Result.Count:= FrameHighIndex"/>
          <Execute Statement="WaveSetup(0, LimitSamples)"/>
          <ForLoop Indexer="ActiveFrameIndex" From="1" To="FrameHighIndex">
            <Variable Identifier="StartTime" Type="Int64" Init="QueryPerformanceCounter" />
            <ExitOnAbortRequest/>
            <Object.Use Identifier="Stream" Type="TStream" Expression="WaveForm(Trace, ActiveFrameIndex, WaveFormFormat)">
              <Variable Identifier="EndTime" Type="Int64" Init="QueryPerformanceCounter" />
              <rep:Reporter.Information Text="Format('Read %d bytes in %f seconds (%f MB/s)', Stream.Size, (EndTime-StartTime)/QueryPerformanceFrequency, Stream.Size / ((EndTime-StartTime)/QueryPerformanceFrequency) / (1024*1024))" Target="Visa" Condition="DoReportVisa"/>
              <sts:Status.Block Text="Format('Processing %d bytes of segment %d', Stream.Size, ActiveFrameIndex)" LeaveText="Format('Done processing data of segment %d', ActiveFrameIndex)">
                <Execute Statement="LoadSamplesFromStream(Result, Stream, LimitSamples)"/>
              </sts:Status.Block>
            </Object.Use>
            <Execute Statement="WaveFormFormat:= TWaveFormFormat.Dat2"/>
          </ForLoop>
        </sts:Status.Block>
      </Block>
    </Function>

    <Function Identifier="TSiglentScope.GetSingleSummedSample" Type="TSingleSummedSampleAcquisitionInfo">
      <Parameters>
        <Parameter Identifier="Trace" Type="TTraceType"/>
        <Parameter Identifier="Options" Type="TSingleSummedSampleAcquisitionOptions"/>
      </Parameters>
      <Variables>
        <Variable Identifier="LimitSamples" Type="Int32" Init="0"/>
      </Variables>
      <Block>
        <Execute Statement="Result:= TSingleSummedSampleAcquisitionInfo.Create"/>
        <Block Condition="Assigned(Options)">
          <Execute Statement="LimitSamples:= Options.LimitSamples"/>
        </Block>
        <Execute Statement="WaveSetup(0, LimitSamples)"/>
        <Variable Identifier="StartTime" Type="Int64" Init="QueryPerformanceCounter" />
        <Object.Use Identifier="Stream" Type="TMemoryStream" Expression="WaveForm(Trace, 0, TWaveFormFormat.All)">
          <ExitOnAbortRequest/>
          <Variable Identifier="EndTime" Type="Int64" Init="QueryPerformanceCounter" />
          <rep:Reporter.Information Text="Format('Read %d bytes in %f seconds (%f MB/s)', Stream.Size, (EndTime-StartTime)/QueryPerformanceFrequency, Stream.Size / ((EndTime-StartTime)/QueryPerformanceFrequency) / (1024*1024))" Target="Visa" Condition="DoReportVisa"/>
          <sts:Status.Block Text="Format('Processing %d bytes', Stream.Size)" LeaveText="'Done processing data'">
            <Execute Statement="LoadSamplesFromStream(Result, Stream, LimitSamples)"/>
          </sts:Status.Block>
        </Object.Use>
      </Block>
    </Function>

    <Function Identifier="TSiglentScope.GetSamples" Type="TSamplesAcquisitionInfo">
      <Parameters>
        <Parameter Identifier="Trace" Type="TTraceType"/>
        <Parameter Identifier="Options" Type="TSamplesAcquisitionOptions"/>
      </Parameters>
      <Variables>
        <Variable Identifier="LimitSamples" Type="Int32" Init="0"/>
      </Variables>
      <Block>
        <Execute Statement="Result:= TSamplesAcquisitionInfo.Create"/>
        <Block Condition="Assigned(Options)">
          <Execute Statement="LimitSamples:= Options.LimitSamples"/>
        </Block>
        <Execute Statement="WaveSetup(0, LimitSamples)"/>
        <Variable Identifier="StartTime" Type="Int64" Init="QueryPerformanceCounter" />
        <Object.Use Identifier="Stream" Type="TMemoryStream" Expression="WaveForm(Trace, 0, TWaveFormFormat.All)">
          <ExitOnAbortRequest/>
          <Variable Identifier="EndTime" Type="Int64" Init="QueryPerformanceCounter" />
          <rep:Reporter.Information Text="Format('Read %d bytes in %f seconds (%f MB/s)', Stream.Size, (EndTime-StartTime)/QueryPerformanceFrequency, Stream.Size / ((EndTime-StartTime)/QueryPerformanceFrequency) / (1024*1024))" Target="Visa" Condition="DoReportVisa"/>
          <sts:Status.Block Text="Format('Processing %d bytes', Stream.Size)" LeaveText="'Done processing data'">
            <Execute Statement="LoadSamplesFromStream(Result, Stream, LimitSamples)"/>
          </sts:Status.Block>
        </Object.Use>
      </Block>
    </Function>

    <Procedure Identifier="TSiglentScope.SaveSamplesToFile">
      <Parameters>
        <Parameter Identifier="AcquisitionInfo" Type="TSamplesAcquisitionInfo"/>
        <Parameter Identifier="Filename" Type="string"/>
      </Parameters>
      <Variables>
        <Variable Identifier="XmlDoc" Type="IXMLDomDocument"/>
        <Variable Identifier="RootE" Type="IXMLDomElement"/>
        <Variable Identifier="DataE" Type="IXMLDomElement"/>
        <Variable Identifier="PointE" Type="IXMLDomElement"/>
      </Variables>
      <Block>
        <sts:Status.Block Text="Format('Saving samples to file &quot;%s&quot;', Filename)" LeaveText="Format('Done saving samples to file &quot;%s&quot;', Filename)">
          <Variable Identifier="Samples" Type="TListInt8" Init="AcquisitionInfo.Samples"/>
          <Variable Identifier="VFactor" Type="Extended" Init="AcquisitionInfo.VFactor"/>
          <Variable Identifier="VOffset" Type="Extended" Init="AcquisitionInfo.VOffset"/>
          <Variable Identifier="Time" Type="Extended" Init="AcquisitionInfo.Time"/>
          <Variable Identifier="TimePerSample" Type="Extended" Init="AcquisitionInfo.TimePerSample"/>
          <sts:Status.Block Text="Format('Processing %d samples', Samples.Count)" LeaveText="'Done processing samples'">
            <msx:Document.Create Identifier="XmlDoc"/>
            <msx:Document.CreateElement Document="XmlDoc" Element="RootE" Name="WaveForm" ParentElement="XmlDoc"/>
            <msx:Element.SetAttribute Element="RootE" Name="xmlns:xsi" Value="'http://www.w3.org/2001/XMLSchema-instance'"/>
            <msx:Element.SetAttribute Element="RootE" Name="xsi:noNamespaceSchemaLocation" Namespace="http://www.w3.org/2001/XMLSchema-instance" Value="'WaveForm.xsd'"/>
            <msx:Document.CreateElement Document="XmlDoc" Element="DataE" Name="Data" ParentElement="RootE"/>
            <ForLoop Indexer="I" From="0" To="Samples.Count - 1">
              <msx:Document.CreateElement Document="XmlDoc" Element="PointE" Name="P" ParentElement="DataE"/>
              <msx:Element.SetAttribute Element="PointE" Name="X" Value="FloatTocode(Time)"/>
              <msx:Element.SetAttribute Element="PointE" Name="Y" Value="FloatTocode(Samples[I] * VFactor + VOffset)"/>
              <Execute Statement="Time:= Time + TimePerSample"/>
            </ForLoop>
          </sts:Status.Block>
          <sts:Status.Block Text="'Writing data to file..'" LeaveText="'Done writing data to file'">
            <Variable Identifier="WriteStream" Type="TSequentialFileWriteStream" Init="TSequentialFileWriteStream.Create(Filename)"/>
            <Variable Identifier="Stream" Type="IStream" Init="WriteStream as IStream"/>
            <Variable Identifier="MXWriter" Type="IMXWriter" Init="CoMXXMLWriter60.Create"/>
            <Execute Statement="MXWriter.Output:= Stream"/>
            <Execute Statement="MXWriter.Indent:= True"/>
            <Execute Statement="MXWriter.encoding:= 'utf-8'"/>
            <Variable Identifier="Output" Type="Variant" Init="MXWriter"/>
            <Variable Identifier="XMLReader" Type="ISAXXMLReader" Init="CoSAXXMLReader60.Create"/>
            <Execute Statement="XMLReader.putContentHandler(MXWriter as ISAXContentHandler)"/>
            <Execute Statement="XMLReader.Parse(XmlDoc)"/>
          </sts:Status.Block>
        </sts:Status.Block>
      </Block>
    </Procedure>

    <Procedure Identifier="TSiglentScope.WaveCapureToFile">
      <Parameters>
        <Parameter Identifier="Trace" Type="TTraceType"/>
        <Parameter Identifier="Options" Type="TSamplesAcquisitionOptions"/>
        <Parameter Identifier="Filename" Type="string"/>
      </Parameters>
      <Block>
        <Object.Use Identifier="AcquisitionInfo" Type="TSamplesAcquisitionInfo" Expression="GetSamples(Trace, Options)">
          <Execute Statement="SaveSamplesToFile(AcquisitionInfo, Filename)"/>
        </Object.Use>
      </Block>
    </Procedure>

    <Procedure Identifier="TSiglentScope.Stop">
      <Block>
        <Execute Statement="WriteString(cSTOPCommand)"/>
      </Block>
    </Procedure>

    <Procedure Identifier="TSiglentScope.Arm">
      <Block>
        <Execute Statement="WriteString('ARM')"/>
      </Block>
    </Procedure>

    <Property Identifier="TSiglentScope.InternalStatusState" Type="TRegisterState">
      <Parameters>
        <Parameter Identifier="Bit" Type="TStatusBit"/>
      </Parameters>
      <Getter>
        <Execute Statement="_InternalStatusStates.Update(QueryUInt32(cINRQuery))"/>
        <Execute Statement="Result:= _InternalStatusStates[Bit]"/>
      </Getter>
    </Property>

    <Function Identifier="TSiglentScope.InternalStatusChanged" Type="Boolean">
      <Parameters>
        <Parameter Identifier="Bit" Type="TStatusBit"/>
        <Parameter Identifier="State" Type="TRegisterState" Direction="InputOutput"/>
      </Parameters>
      <Block>
        <Execute Statement="_InternalStatusStates.Update(QueryUInt32(cINRQuery))"/>
        <Variable Identifier="NewState" Type="UInt64" Init="_InternalStatusStates[Bit]"/>
        <Execute Statement="Result:= NewState &lt;&gt; State"/>
        <Execute Statement="State:= NewState"/>
      </Block>
    </Function>

    <Procedure Identifier="TSiglentScope.SetAverageMode">
      <Parameters>
        <Parameter Identifier="Time" Type="TAvgTime"/>
      </Parameters>
      <Block>
        <Execute Statement="WriteString(cACQUIRE_WAYAverageCommand + AvgTimeFromVid(Time))"/>
      </Block>
    </Procedure>

    <Function Identifier="TSiglentScope.GetCycleSamples" Type="Integer">
      <Parameters>
        <Parameter Identifier="Frequency" Type="ConvInt"/>
        <Parameter Identifier="Cycles" Type="ConvInt"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= Round(ucPowerLineCycles.IntValueToExtended(Cycles) * SampleRate / ucCycleFrequency.IntValueToExtended(Frequency))"/>
      </Block>
    </Function>

    <Function Identifier="TSiglentScopeIniHelper.ConvReadTDiv" Type="ConvInt">
      <Parameters>
        <Parameter Identifier="Key" Type="string"/>
        <Parameter Identifier="Default" Type="string"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= ReadConvInt(Key, ucTDiv, Default)"/>
      </Block>
    </Function>

    <Function Identifier="TSiglentScopeIniHelper.ConvReadMathVDiv" Type="ConvInt">
      <Parameters>
        <Parameter Identifier="Key" Type="string"/>
        <Parameter Identifier="Default" Type="string"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= ReadConvInt(Key, ucMathVDiv, Default)"/>
      </Block>
    </Function>

    <Function Identifier="TSiglentScopeIniHelper.ConvReadMathVPosition" Type="ConvInt">
      <Parameters>
        <Parameter Identifier="Key" Type="string"/>
        <Parameter Identifier="Default" Type="string"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= ReadConvInt(Key, ucMathVPosition, Default)"/>
      </Block>
    </Function>

    <Function Identifier="TSiglentScopeIniHelper.ConvReadTriggerDelay" Type="ConvInt">
      <Parameters>
        <Parameter Identifier="Key" Type="string"/>
        <Parameter Identifier="Default" Type="string"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= ReadConvInt(Key, ucTriggerDelay, Default)"/>
      </Block>
    </Function>

    <Function Identifier="TSiglentScopeIniHelper.ConvReadTriggerLevel" Type="ConvInt">
      <Parameters>
        <Parameter Identifier="Key" Type="string"/>
        <Parameter Identifier="Default" Type="string"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= ReadConvInt(Key, ucTriggerLevel, Default)"/>
      </Block>
    </Function>

    <Function Identifier="TSiglentScopeIniHelper.ConvReadVDiv" Type="ConvInt">
      <Parameters>
        <Parameter Identifier="Key" Type="string"/>
        <Parameter Identifier="Default" Type="string"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= ReadConvInt(Key, ucVDiv, Default)"/>
      </Block>
    </Function>

    <Function Identifier="TSiglentScopeIniHelper.ConvReadVOffset" Type="ConvInt">
      <Parameters>
        <Parameter Identifier="Key" Type="string"/>
        <Parameter Identifier="Default" Type="string"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= ReadConvInt(Key, ucVOffset, Default)"/>
      </Block>
    </Function>

    <Function Identifier="TSiglentScopeIniHelper.ConvReadAttenuation" Type="ConvInt">
      <Parameters>
        <Parameter Identifier="Key" Type="string"/>
        <Parameter Identifier="Default" Type="string"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= ReadConvInt(Key, ucAttenuation, Default)"/>
      </Block>
    </Function>

    <Function Identifier="TSiglentScopeIniHelper.ReadTraceType" Type="TTraceType">
      <Parameters>
        <Parameter Identifier="Key" Type="string"/>
        <Parameter Identifier="Default" Type="TTraceType"/>
      </Parameters>
      <Block>
        <Variable Identifier="DefaultString" Type="string" Init="TSiglentScope.TraceTypeName(Default)"/>
        <Variable Identifier="ResultS" Type="string" Init="Inifile.ReadString(CurrentSection, Key, DefaultString)"/>
        <Execute Statement="Result:= TSiglentScope.TraceTypeFromName(ResultS)"/>
        <rep:Reporter.Information Text="Format('%s=%s', Key, TSiglentScope.TraceTypeName(Result))" Condition="EnableEcho"/>
      </Block>
    </Function>

    <Function Identifier="TSiglentScopeIniHelper.ReadChannelType" Type="TChannelType">
      <Parameters>
        <Parameter Identifier="Key" Type="string"/>
        <Parameter Identifier="Default" Type="TChannelType"/>
      </Parameters>
      <Block>
        <Variable Identifier="DefaultString" Type="string" Init="TSiglentScope.ChannelTypeName(Default)"/>
        <Variable Identifier="ResultS" Type="string" Init="Inifile.ReadString(CurrentSection, Key, DefaultString)"/>
        <Execute Statement="Result:= TSiglentScope.ChannelTypeFromName(ResultS)"/>
        <rep:Reporter.Information Text="Format('%s=%s', Key, TSiglentScope.ChannelTypeName(Result))" Condition="EnableEcho"/>
      </Block>
    </Function>

    <Function Identifier="TSiglentScopeIniHelper.ReadTriggerMode" Type="TTriggerMode">
      <Parameters>
        <Parameter Identifier="Key" Type="string"/>
        <Parameter Identifier="Default" Type="TTriggerMode"/>
      </Parameters>
      <Block>
        <Variable Identifier="DefaultString" Type="string" Init="TSiglentScope.TriggerModeName(Default)"/>
        <Variable Identifier="ResultS" Type="string" Init="Inifile.ReadString(CurrentSection, Key, DefaultString)"/>
        <Execute Statement="Result:= TSiglentScope.TriggerModeFromName(ResultS)"/>
        <rep:Reporter.Information Text="Format('%s=%s', Key, TSiglentScope.TriggerModeName(Result))" Condition="EnableEcho"/>
      </Block>
    </Function>

    <Function Identifier="TSiglentScopeIniHelper.ReadMemSize" Type="TMemSize">
      <Parameters>
        <Parameter Identifier="Key" Type="string"/>
        <Parameter Identifier="Default" Type="TMemSize"/>
      </Parameters>
      <Block>
        <Variable Identifier="DefaultString" Type="string" Init="TSiglentScope.MemSizeName(Default)"/>
        <Variable Identifier="ResultS" Type="string" Init="Inifile.ReadString(CurrentSection, Key, DefaultString)"/>
        <Execute Statement="Result:= TSiglentScope.MemSizeFromName(ResultS)"/>
        <rep:Reporter.Information Text="Format('%s=%s', Key, TSiglentScope.MemSizeName(Result))" Condition="EnableEcho"/>
      </Block>
    </Function>

    <Function Identifier="TSiglentScopeIniHelper.ReadAvgTime" Type="TAvgTime">
      <Parameters>
        <Parameter Identifier="Key" Type="string"/>
        <Parameter Identifier="Default" Type="TAvgTime"/>
      </Parameters>
      <Block>
        <Variable Identifier="DefaultString" Type="string" Init="TSiglentScope.AvgTimeName(Default)"/>
        <Variable Identifier="ResultS" Type="string" Init="Inifile.ReadString(CurrentSection, Key, DefaultString)"/>
        <Execute Statement="Result:= TSiglentScope.AvgTimeFromName(ResultS)"/>
        <rep:Reporter.Information Text="Format('%s=%s', Key, TSiglentScope.AvgTimeName(Result))" Condition="EnableEcho"/>
      </Block>
    </Function>

    <Function Identifier="TSiglentScopeIniHelper.ReadAcquireWay" Type="TAcquireWay">
      <Parameters>
        <Parameter Identifier="Key" Type="string"/>
        <Parameter Identifier="Default" Type="TAcquireWay"/>
      </Parameters>
      <Block>
        <Variable Identifier="DefaultString" Type="string" Init="TSiglentScope.AcquireWayName(Default)"/>
        <Variable Identifier="ResultS" Type="string" Init="Inifile.ReadString(CurrentSection, Key, DefaultString)"/>
        <Execute Statement="Result:= TSiglentScope.AcquireWayFromName(ResultS)"/>
        <rep:Reporter.Information Text="Format('%s=%s', Key, TSiglentScope.AcquireWayName(Result))" Condition="EnableEcho"/>
      </Block>
    </Function>

    <Constructor Identifier="TSiglentScopeIniHelper.Create">
      <Parameters>
        <Parameter Identifier="Inifile" Type="TCustomIniFile"/>
        <Parameter Identifier="EnableEcho" Type="Boolean"/>
      </Parameters>
      <Block>
        <Execute Statement="inherited Create(Inifile, EnableEcho)"/>
      </Block>
    </Constructor>

  </Procedures>

  <Finalization>
    <Free Identifier="CouplingNameIndex"/>
    <Free Identifier="CouplingVidIndex"/>
    <Free Identifier="TraceTypeNameIndex"/>
    <Free Identifier="ChannelTypeNameIndex"/>
    <Free Identifier="TriggerModeNameIndex"/>
    <Free Identifier="MemSizeNameIndex"/>
    <Free Identifier="AvgTimeNameIndex"/>
    <Free Identifier="AcquireWayNameIndex"/>
    <Free Identifier="AcquireWayVidIndex"/>
    <Free Identifier="AvgTimeVidIndex"/>
    <Free Identifier="ChannelTypeVidIndex"/>
    <Free Identifier="HeaderTypeVidIndex"/>
    <Free Identifier="MemSizeVidIndex"/>
    <Free Identifier="TraceTypeVidIndex"/>
    <Free Identifier="TriggerModeVidIndex"/>
  </Finalization>

</pkg:Library>