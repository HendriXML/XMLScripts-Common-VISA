<?xml version="1.0" encoding="utf-8" standalone="no"?>
<pkg:Library
  xsi:schemaLocation="urn:schemas-www-wisware.nl-scriptingpackages ../XmlSchemas.Common.XmlScript/XMLScripting.Packages.xsd"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:pkg="urn:schemas-www-wisware.nl-scriptingpackages"
  xmlns:sys="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:ado="urn:schemas-www-wisware.nl-xmlscripting-ado"
  xmlns:fil="urn:schemas-www-wisware.nl-xmlscripting-filemanagement"
  xmlns:fwl="urn:schemas-www-wisware.nl-xmlscripting-windowsfirewall"
  xmlns:inx="urn:schemas-www-wisware.nl-xmlscripting-index"
  xmlns:lil="urn:schemas-www-wisware.nl-xmlscripting-linkedlist"
  xmlns:msx="urn:schemas-www-wisware.nl-xmlscripting-xml"
  xmlns:reg="urn:schemas-www-wisware.nl-xmlscripting-registry"
  xmlns:rep="urn:schemas-www-wisware.nl-xmlscripting-report"
  xmlns:sts="urn:schemas-www-wisware.nl-xmlscripting-showstatus"
  xmlns:syu="urn:schemas-www-wisware.nl-xmlscripting-sysutils"
  xmlns:sim="urn:schemas-www-wisware.nl-xmlscripting-simulateuserinput"
  >
  <Uses>
    <Use Identifier="ElectronicUtils"/>
    <Use Identifier="VISAInstrument"/>
  </Uses>

  <Type>
    <Enumeration Identifier="TSPD3303XChannel" Elements="CH1, CH2, CH3" LowAlias="Low" HighAlias="High"/>

    <DataClass Identifier="TSiglentSPD3303XIniHelper" Inherit="TIniHelper" DefaultConstructor="none">
    </DataClass>

    <DataClass Identifier="TSiglentSPD3303X" Inherit="TVISAInstrument" ClassOfIdentifier="TTSiglentSPD3303X">

    </DataClass>
  </Type>

  <Constants>
    <Constant Identifier="cOn" Type="ViString" Expression="'ON'"/>
    <Constant Identifier="cOff" Type="ViString" Expression="'OFF'"/>
    <Constant Identifier="cCH1" Type="ViString" Expression="'CH1'"/>
    <Constant Identifier="cCH2" Type="ViString" Expression="'CH2'"/>
    <Constant Identifier="cCH3" Type="ViString" Expression="'CH3'"/>
    <Constant Identifier="cNameSPD3303XChannelTypeCH1" Type="string" Expression="'CH1'"/>
    <Constant Identifier="cNameSPD3303XChannelTypeCH2" Type="string" Expression="'CH2'"/>
    <Constant Identifier="cNameSPD3303XChannelTypeCH3" Type="string" Expression="'CH3'"/>
    <Constant Identifier="cBitOnOffCH1" Type="UInt32" Expression="1 shl 4"/>
    <Constant Identifier="cBitOnOffCH2" Type="UInt32" Expression="1 shl 5"/>
    <Constant Identifier="cVOLTageQuery" Type="ViString" Expression="':VOLTage?'"/>
    <Constant Identifier="cVOLTageCommand" Type="ViString" Expression="':VOLTage '"/>
    <Constant Identifier="cCURRentQuery" Type="ViString" Expression="':CURRent?'"/>
    <Constant Identifier="cCURRentCommand" Type="ViString" Expression="':CURRent '"/>
    <Constant Identifier="cMEASureCURRentQuery" Type="ViString" Expression="'MEASure:CURRent? '"/>
    <Constant Identifier="cMEASureVOLTageQuery" Type="ViString" Expression="'MEASure:VOLTage? '"/>
    <Constant Identifier="cOUTPutQuery" Type="ViString" Expression="'OUTPut? '"/>
    <Constant Identifier="cOUTPutCommand" Type="ViString" Expression="'OUTPut '"/>
    <Constant Identifier="cSYSTemSTATusQuery" Type="ViString" Expression="'SYSTem:STATus?'"/>
    <Constant Identifier="sErrorInvalidChannel" Type="string" Expression="'Invalid channel'"/>
  </Constants>

  <Variables>
    <Variable Identifier="ucVoltage" Type="TUnitConvertor"/>
    <Variable Identifier="ucActualVoltage" Type="TUnitConvertor"/>

    <Variable Identifier="ucCurrent" Type="TUnitConvertor"/>
    <Variable Identifier="ucActualCurrent" Type="TUnitConvertor"/>

    <Variable Identifier="SPD3303XChannelTypeNameIndex" Type="TMappingCaseInSensitiveUnicodeStringToInt64"/>
  </Variables>

  <Procedures>

    <Procedure Identifier="RaiseInvalidChannel">
      <Block>
        <Raise Expression="Exception.Create(sErrorInvalidChannel)"/>
      </Block>
    </Procedure>

    <Function Identifier="TTSiglentSPD3303X.ChannelTypeName" Type="string" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="TSPD3303XChannel"/>
      </Parameters>
      <Block>
        <Case Expression="Value" Optimalisation="integermapping">
          <On Select="TSPD3303XChannel.CH1">
            <Execute Statement="Result:= cNameSPD3303XChannelTypeCH1"/>
          </On>
          <On Select="TSPD3303XChannel.CH2">
            <Execute Statement="Result:= cNameSPD3303XChannelTypeCH2"/>
          </On>
          <On Select="TSPD3303XChannel.CH3">
            <Execute Statement="Result:= cNameSPD3303XChannelTypeCH3"/>
          </On>
          <Otherwise>
            <Raise Expression="Exception.Create(sErrorInvalidChannel)"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TTSiglentSPD3303X.ChannelTypeFromName" Type="TSPD3303XChannel">
      <Parameters>
        <Parameter Identifier="Name" Type="string"/>
      </Parameters>
      <Block>
        <Block Condition="IsEmpty(SPD3303XChannelTypeNameIndex)">
          <Execute Statement="SPD3303XChannelTypeNameIndex:= TMappingCaseInSensitiveUnicodeStringToInt64.Create"/>
          <ForLoop Indexer="I" From="TSPD3303XChannel.Low" To="TSPD3303XChannel.High">
            <inx:Index.MapValue Index="SPD3303XChannelTypeNameIndex" Key="ChannelTypeName(I)" Value="I"/>
          </ForLoop>
        </Block>
        <Variable Identifier="Found" Type="Boolean"/>
        <inx:Index.FindValue Index="SPD3303XChannelTypeNameIndex" Key="Name" Value="Result" Found="Found" Flags="NoErrorOnNotFound" />
        <Raise Expression="Exception.Create(sErrorInvalidChannel)" Condition="not Found"/>
      </Block>
    </Function>

    <Property Identifier="TSiglentSPD3303X.ChannelID" Type="ViString">
      <Parameters>
        <Parameter Identifier="Channel" Type="TSPD3303XChannel"/>
      </Parameters>
      <Getter>
        <Case Expression="Channel">
          <On Select="TSPD3303XChannel.CH1">
            <Execute Statement="Result:= cCH1"/>
          </On>
          <On Select="TSPD3303XChannel.CH2">
            <Execute Statement="Result:= cCH2"/>
          </On>
          <On Select="TSPD3303XChannel.CH3">
            <Execute Statement="Result:= cCH3"/>
          </On>
          <Otherwise>
            <Execute Statement="RaiseInvalidChannel"/>
          </Otherwise>
        </Case>
      </Getter>
    </Property>

    <Property Identifier="TSiglentSPD3303X.FullControlChannelID" Type="ViString">
      <Parameters>
        <Parameter Identifier="Channel" Type="TSPD3303XChannel"/>
      </Parameters>
      <Getter>
        <Case Expression="Channel">
          <On Select="TSPD3303XChannel.CH1">
            <Execute Statement="Result:= cCH1"/>
          </On>
          <On Select="TSPD3303XChannel.CH2">
            <Execute Statement="Result:= cCH2"/>
          </On>
          <Otherwise>
            <Execute Statement="RaiseInvalidChannel"/>
          </Otherwise>
        </Case>
      </Getter>
    </Property>

    <Property Identifier="TSiglentSPD3303X.Voltage" Type="Extended">
      <Parameters>
        <Parameter Identifier="Channel" Type="TSPD3303XChannel"/>
      </Parameters>
      <Getter>
        <Execute Statement="Result:= QueryFloat(FullControlChannelID[Channel] + cVOLTageQuery)"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteString(FullControlChannelID[Channel] + cVOLTageCommand + FloatToCode(Value))"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentSPD3303X.ConvVoltage" Type="ConvInt" >
      <Parameters>
        <Parameter Identifier="Channel" Type="TSPD3303XChannel"/>
      </Parameters>
      <Getter>
        <Execute Statement="Result:= QueryConvInt(FullControlChannelID[Channel] + cVOLTageQuery, ucVoltage)"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteString(FullControlChannelID[Channel] + cVOLTageCommand + ucVoltage.IntValueToEngineeringStr(Value, TUnitPostFix.None, viDecimalSeperatior))"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentSPD3303X.Current" Type="Extended">
      <Parameters>
        <Parameter Identifier="Channel" Type="TSPD3303XChannel"/>
      </Parameters>
      <Getter>
        <Execute Statement="Result:= QueryFloat(FullControlChannelID[Channel] + cCURRentQuery)"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteString(FullControlChannelID[Channel] + cCURRentCommand + FloatToCode(Value))"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentSPD3303X.ConvCurrent" Type="ConvInt" >
      <Parameters>
        <Parameter Identifier="Channel" Type="TSPD3303XChannel"/>
      </Parameters>
      <Getter>
        <Execute Statement="Result:= QueryConvInt(FullControlChannelID[Channel] + cCURRentQuery, ucCurrent)"/>
      </Getter>
      <Setter>
        <Execute Statement="WriteString(FullControlChannelID[Channel] + cCURRentCommand + ucCurrent.IntValueToEngineeringStr(Value, TUnitPostFix.None, viDecimalSeperatior))"/>
      </Setter>
    </Property>

    <Property Identifier="TSiglentSPD3303X.ActualCurrent" Type="Extended">
      <Parameters>
        <Parameter Identifier="Channel" Type="TSPD3303XChannel"/>
      </Parameters>
      <Getter>
        <Execute Statement="Result:= QueryFloat(cMEASureCURRentQuery + FullControlChannelID[Channel])"/>
      </Getter>
    </Property>

    <Property Identifier="TSiglentSPD3303X.ConvActualCurrent" Type="ConvInt" >
      <Parameters>
        <Parameter Identifier="Channel" Type="TSPD3303XChannel"/>
      </Parameters>
      <Getter>
        <Execute Statement="Result:= QueryConvInt(cMEASureCURRentQuery + FullControlChannelID[Channel], ucActualCurrent)"/>
      </Getter>
    </Property>

    <Property Identifier="TSiglentSPD3303X.ActualVoltage" Type="Extended">
      <Parameters>
        <Parameter Identifier="Channel" Type="TSPD3303XChannel"/>
      </Parameters>
      <Getter>
        <Execute Statement="Result:= QueryFloat(cMEASureVOLTageQuery + FullControlChannelID[Channel])"/>
      </Getter>
    </Property>

    <Property Identifier="TSiglentSPD3303X.ConvActualVoltage" Type="ConvInt" >
      <Parameters>
        <Parameter Identifier="Channel" Type="TSPD3303XChannel"/>
      </Parameters>
      <Getter>
        <Execute Statement="Result:= QueryConvInt(cMEASureVOLTageQuery + FullControlChannelID[Channel], ucActualCurrent)"/>
      </Getter>
    </Property>

    <Function Identifier="TSiglentSPD3303X.WaitForStabilizedVoltage">
      <Parameters>
        <Parameter Identifier="Channel" Type="TSPD3303XChannel"/>
        <Parameter Identifier="DiffTime" Type="Integer"/>
        <Parameter Identifier="Difference" Type="Extended"/>
      </Parameters>
      <Block>
        <Variable Identifier="PreWaitVoltage" Type="Extended"/>
        <Variable Identifier="SPCICommand" Type="ViString" Init="cMEASureVOLTageQuery + FullControlChannelID[Channel]"/>
        <RepeatUntilLoop Expression="Abs(PreWaitVoltage - Result) &lt; Difference">
          <ExitOnAbortRequest/>
          <Execute Statement="WriteString(SPCICommand)"/>
          <Execute Statement="PreWaitVoltage:= ReadFloat"/>
          <sim:Wait Time="DiffTime"/>
          <Execute Statement="WriteString(SPCICommand)"/>
          <Execute Statement="Result:= ReadFloat"/>
        </RepeatUntilLoop>
      </Block>
    </Function>

    <Property Identifier="TSiglentSPD3303X.Enabled" Type="Boolean">
      <Parameters>
        <Parameter Identifier="Channel" Type="TSPD3303XChannel"/>
      </Parameters>
      <Getter>
        <Case Expression="Channel">
          <On Select="TSPD3303XChannel.CH1">
            <Execute Statement="WriteString(cSYSTemSTATusQuery)"/>
            <Execute Statement="Result:= (ReadUInt32 and cBitOnOffCH1) = cBitOnOffCH1"/>
          </On>
          <On Select="TSPD3303XChannel.CH2">
            <Execute Statement="WriteString(cSYSTemSTATusQuery)"/>
            <Execute Statement="Result:= (ReadUInt32 and cBitOnOffCH2) = cBitOnOffCH2"/>
          </On>
          <Otherwise>
            <Execute Statement="RaiseInvalidChannel"/>
          </Otherwise>
        </Case>
      </Getter>
      <Setter>
        <Variable Identifier="ValueS" Type="ViString" Init="IfElse(Value, cOn, cOff)"/>
        <Execute Statement="WriteString(cOUTPutCommand + ChannelID[Channel]  + ',' + ValueS)"/>
      </Setter>
    </Property>

    <Function Identifier="TSiglentSPD3303XIniHelper.ConvReadVoltage" Type="ConvInt">
      <Parameters>
        <Parameter Identifier="Key" Type="string"/>
        <Parameter Identifier="Default" Type="string"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= ReadConvInt(Key, ucVoltage, Default)"/>
      </Block>
    </Function>

    <Function Identifier="TSiglentSPD3303XIniHelper.ConvReadCurrent" Type="ConvInt">
      <Parameters>
        <Parameter Identifier="Key" Type="string"/>
        <Parameter Identifier="Default" Type="string"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= ReadConvInt(Key, ucCurrent, Default)"/>
      </Block>
    </Function>

    <Function Identifier="TSiglentSPD3303XIniHelper.ReadSPD3303XChannel" Type="TSPD3303XChannel">
      <Parameters>
        <Parameter Identifier="Key" Type="string"/>
        <Parameter Identifier="Default" Type="TSPD3303XChannel"/>
      </Parameters>
      <Block>
        <Variable Identifier="DefaultString" Type="string" Init="TSiglentSPD3303X.ChannelTypeName(Default)"/>
        <Variable Identifier="ResultS" Type="string" Init="Inifile.ReadString(CurrentSection, Key, DefaultString)"/>
        <Execute Statement="Result:= TSiglentSPD3303X.ChannelTypeFromName(ResultS)"/>
        <rep:Reporter.Information Text="Format('%s=%s', Key, TSiglentSPD3303X.ChannelTypeName(Result))" Condition="EnableEcho"/>
      </Block>
    </Function>

    <Constructor Identifier="TSiglentSPD3303XIniHelper.Create">
      <Parameters>
        <Parameter Identifier="Inifile" Type="TCustomIniFile"/>
        <Parameter Identifier="EnableEcho" Type="Boolean"/>
      </Parameters>
      <Block>
        <Execute Statement="inherited Create(Inifile, EnableEcho)"/>
      </Block>
    </Constructor>

  </Procedures>
  
  <Initialization>
    <Execute Statement="ucVoltage:= TUnitConvertor.Create(TGranularity.Pico, TSiUnit.Volt)" />
    <Execute Statement="ucActualVoltage:= ucVoltage" />
    <Execute Statement="ucCurrent:= TUnitConvertor.Create(TGranularity.Pico, TSiUnit.Amp)" />
    <Execute Statement="ucActualCurrent:= ucCurrent" />
  </Initialization>

  <Finalization>
    <Free Identifier="SPD3303XChannelTypeNameIndex"/>
  </Finalization>
</pkg:Library>