<?xml version="1.0" encoding="utf-8" standalone="no"?>
<pkg:Library
  xsi:schemaLocation="urn:schemas-www-wisware.nl-scriptingpackages ../XmlSchemas.Common.XmlScript/XMLScripting.Packages.xsd"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:pkg="urn:schemas-www-wisware.nl-scriptingpackages"
  xmlns:sys="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:ado="urn:schemas-www-wisware.nl-xmlscripting-ado"
  xmlns:fil="urn:schemas-www-wisware.nl-xmlscripting-filemanagement"
  xmlns:fwl="urn:schemas-www-wisware.nl-xmlscripting-windowsfirewall"
  xmlns:inx="urn:schemas-www-wisware.nl-xmlscripting-index"
  xmlns:lil="urn:schemas-www-wisware.nl-xmlscripting-linkedlist"
  xmlns:msx="urn:schemas-www-wisware.nl-xmlscripting-xml"
  xmlns:reg="urn:schemas-www-wisware.nl-xmlscripting-registry"
  xmlns:rep="urn:schemas-www-wisware.nl-xmlscripting-report"
  xmlns:sts="urn:schemas-www-wisware.nl-xmlscripting-showstatus"
  xmlns:syu="urn:schemas-www-wisware.nl-xmlscripting-sysutils"
  xmlns:stm="urn:schemas-www-wisware.nl-xmlscripting-statemanagement"
 >
  <Uses>
    <Use Identifier="ElectronicUtils"/>
  </Uses>

  <Type>
    <Alias Identifier="TMappingCaseInSensitiveViStringToInt64" RefersTo="TMappingCaseInSensitiveStringToInt64"/>
    <Alias Identifier="TRegisterState" RefersTo="UInt64"/>

    <Enumeration Identifier="TVisaAttributeState" Elements="NoValue, ValidValue, InvalidValue, PendingChange"/>

    <DataClass Identifier="TVisaInstrument" ClassOfIdentifier="TTVisaInstrument">
      <Field Identifier="VisaResource" Type="TVisaResource"/>
    </DataClass>

    <DataClass Identifier="TIniHelper" DefaultConstructor="none">
      <Field Identifier="Inifile" Type="TCustomIniFile"/>
      <Field Identifier="EnableEcho" Type="Boolean"/>
      <Field Identifier="CurrentSection" Type="string"/>
    </DataClass>

    <DataClass Identifier="TVisaAtrributeGroup" DefaultConstructor="none">
      <VirtualMethod Identifier="vmSetAttributeStates"/>
      <Field Identifier="Instrument" Type="TVisaInstrument"/>
    </DataClass>

    <DataClass Identifier="TAcquisitionInfo">
      <Field Identifier="Time" Type="Extended"/>
      <Field Identifier="TimePerSample" Type="Extended"/>
      <Field Identifier="VFactor" Type="Extended"/>
      <Field Identifier="VOffset" Type="Extended"/>
      <Field Identifier="VUnit" Type="AnsiChar"/>
      <Field Identifier="ProbeAttenuation" Type="Extended"/>
      <Field Identifier="VDiv" Type="Extended"/>
      <Field Identifier="HDiv" Type="Extended"/>
      <Field Identifier="HOffset" Type="Extended"/>
    </DataClass>

    <DataClass Identifier="TMultiFrameAcquisitionInfo" Inherit="TAcquisitionInfo">
      <VirtualMethod Identifier="vmFinalize" IsFinalizer="true"/>
      <Field Identifier="SamplePointManager" Type="TSamplePointManager"/>
      <Field Identifier="Initial" Type="Boolean"/>
      <Field Identifier="Count" Type="UInt32"/>
    </DataClass>

    <DataClass Identifier="TSingleSummedSampleAcquisitionInfo" Inherit="TAcquisitionInfo">
      <VirtualMethod Identifier="vmFinalize" IsFinalizer="true"/>
      <Field Identifier="SamplePointManager" Type="TSamplePoint32Manager"/>
      <Field Identifier="Sample" Type="TSamplePoint32"/>
    </DataClass>

    <DataClass Identifier="TScopeSample">
      <Field Identifier="Time" Type="Extended"/>
      <Field Identifier="Value" Type="Extended"/>
      <Field Identifier="Next" Type="TScopeSample"/>
    </DataClass>

    <DataClass Identifier="TScopeSampleCollection">
      <Field Identifier="SampleHead" Type="TScopeSample"/>
    </DataClass>
  </Type>
  <Constants>
    <Constant Identifier="cOPCQuery" Type="ViString" Expression="'*OPC?'"/>
    <Constant Identifier="cIDNQuery" Type="ViString" Expression="'*IDN?'"/>
    <Constant Identifier="viSpace" Type="ViString" Expression="' '"/>
    <Constant Identifier="viComma" Type="ViString" Expression="','"/>
    <Constant Identifier="viDecimalSeperatior" Type="string" Expression="'.'"/>
    <Constant Identifier="sErrorUnsupportedOperation" Type="string" Expression="'Unsupported operation'"/>
    <Constant Identifier="sOn" Type="ViString" Expression="'ON'"/>
    <Constant Identifier="sOff" Type="ViString" Expression="'OFF'"/>
  </Constants>

  <Variables>
    <Variable Identifier="DoReportVisa" Type="Boolean" Init="False"/>
  </Variables>

  <Procedures>

    <Function Identifier="TTVisaInstrument.DecodeIDN" Type="Boolean" IsDeterministic="true">
      <Parameters>
        <Parameter Identifier="Value" Type="ViString"/>
        <Parameter Identifier="Field1" Type="ViString" Direction="Output"/>
        <Parameter Identifier="Field2" Type="ViString" Direction="Output"/>
        <Parameter Identifier="Field3" Type="ViString" Direction="Output"/>
        <Parameter Identifier="Field4" Type="ViString" Direction="Output"/>
      </Parameters>
      <Block>
        <Variable Identifier="Index" Type="Integer" Init="1"/>
        <Variable Identifier="FieldStart1" Type="Integer"/>
        <Variable Identifier="FieldStart2" Type="Integer"/>
        <Variable Identifier="FieldStart3" Type="Integer"/>
        <Variable Identifier="FieldStart4" Type="Integer"/>
        <Variable Identifier="FieldCount1" Type="Integer"/>
        <Variable Identifier="FieldCount2" Type="Integer"/>
        <Variable Identifier="FieldCount3" Type="Integer"/>
        <Variable Identifier="FieldCount4" Type="Integer" Init="0"/>
        <Execute Statement="Result:= False"/>
        <stm:StateHandler InitialState="StartField1">
          <StringLoop StringValue="Value" OrdinalIdentifier="Chr" Ansi="true">
            <stm:HandleStates>
              <stm:State Name="StartField1">
                <Case Expression="Chr" OrdinalType="ansichar">
                  <On Select="','">
                    <Execute Statement="FieldStart1:= Index"/>
                    <Execute Statement="FieldCount1:= 0"/>
                    <stm:SetState Name="StartField2"/>
                  </On>
                  <Otherwise>
                    <Execute Statement="FieldStart1:= Index"/>
                    <Execute Statement="FieldCount1:= 1"/>
                    <stm:SetState Name="InField1"/>
                  </Otherwise>
                </Case>
              </stm:State>
              <stm:State Name="InField1">
                <Case Expression="Chr" OrdinalType="ansichar">
                  <On Select="','">
                    <stm:SetState Name="StartField2"/>
                  </On>
                  <Otherwise>
                    <Execute Statement="FieldCount1:= FieldCount1 + 1"/>
                  </Otherwise>
                </Case>
              </stm:State>
              <stm:State Name="StartField2">
                <Case Expression="Chr" OrdinalType="ansichar">
                  <On Select="','">
                    <Execute Statement="FieldStart2:= Index"/>
                    <Execute Statement="FieldCount2:= 0"/>
                    <stm:SetState Name="StartField3"/>
                  </On>
                  <Otherwise>
                    <Execute Statement="FieldStart2:= Index"/>
                    <Execute Statement="FieldCount2:= 1"/>
                    <stm:SetState Name="InField2"/>
                  </Otherwise>
                </Case>
              </stm:State>
              <stm:State Name="InField2">
                <Case Expression="Chr" OrdinalType="ansichar">
                  <On Select="','">
                    <stm:SetState Name="StartField3"/>
                  </On>
                  <Otherwise>
                    <Execute Statement="FieldCount2:= FieldCount2 + 1"/>
                  </Otherwise>
                </Case>
              </stm:State>
              <stm:State Name="StartField3">
                <Case Expression="Chr" OrdinalType="ansichar">
                  <On Select="','">
                    <Execute Statement="FieldStart3:= Index"/>
                    <Execute Statement="FieldCount3:= 0"/>
                    <stm:SetState Name="StartField4"/>
                  </On>
                  <Otherwise>
                    <Execute Statement="FieldStart3:= Index"/>
                    <Execute Statement="FieldCount3:= 1"/>
                    <stm:SetState Name="InField3"/>
                  </Otherwise>
                </Case>
              </stm:State>
              <stm:State Name="InField3">
                <Case Expression="Chr" OrdinalType="ansichar">
                  <On Select="','">
                    <Execute Statement="Result:= True"/>
                    <stm:SetState Name="StartField4"/>
                  </On>
                  <Otherwise>
                    <Execute Statement="FieldCount3:= FieldCount3 + 1"/>
                  </Otherwise>
                </Case>
              </stm:State>
              <stm:State Name="StartField4">
                <Case Expression="Chr" OrdinalType="ansichar">
                  <On Select="','">
                    <Exit/>
                  </On>
                  <Otherwise>
                    <Execute Statement="Result:= True"/>
                    <Execute Statement="FieldStart4:= Index"/>
                    <Execute Statement="FieldCount4:= 1"/>
                    <stm:SetState Name="InField4"/>
                  </Otherwise>
                </Case>
              </stm:State>
              <stm:State Name="InField4">
                <Case Expression="Chr" OrdinalType="ansichar">
                  <On Select="','">
                    <stm:SetState Name="Done"/>
                  </On>
                  <Otherwise>
                    <Execute Statement="FieldCount4:= FieldCount4 + 1"/>
                  </Otherwise>
                </Case>
              </stm:State>
              <stm:State Name="Done">
              </stm:State>
            </stm:HandleStates>
            <Execute Statement="Index:= Index + 1"/>
          </StringLoop>
        </stm:StateHandler>
        <Block Condition="Result">
          <Execute Statement="Field1:= Copy(Value, FieldStart1, FieldCount1)"/>
          <Execute Statement="Field2:= Copy(Value, FieldStart2, FieldCount2)"/>
          <Execute Statement="Field3:= Copy(Value, FieldStart3, FieldCount3)"/>
          <Choose>
            <When Expression="FieldCount4 = 0">
              <Execute Statement="Field4:= ''"/>
            </When>
            <Otherwise>
              <Execute Statement="Field4:= Copy(Value, FieldStart4, FieldCount4)"/>
            </Otherwise>
          </Choose>
        </Block>
      </Block>
    </Function>

    <Constructor Identifier="TMultiFrameAcquisitionInfo.Create">
      <Block>
        <Execute Statement="SamplePointManager:= TSamplePointManager.Create"/>
        <Execute Statement="Initial:= True"/>
      </Block>
    </Constructor>

    <Procedure Identifier="TMultiFrameAcquisitionInfo.Finalize" VirtualMethod="vmFinalize">
      <Block>
        <Execute Statement="SamplePointManager.Free"/>
      </Block>
    </Procedure>

    <Constructor Identifier="TSingleSummedSampleAcquisitionInfo.Create">
      <Block>
        <Execute Statement="SamplePointManager:= TSamplePoint32Manager.Create"/>
        <Execute Statement="Sample:= SamplePointManager.NewPoint"/>
      </Block>
    </Constructor>

    <Procedure Identifier="TSingleSummedSampleAcquisitionInfo.Finalize" VirtualMethod="vmFinalize">
      <Block>
        <Execute Statement="SamplePointManager.Free"/>
      </Block>
    </Procedure>

    <Constructor Identifier="TVisaAtrributeGroup.Create">
      <Parameters>
        <Parameter Identifier="Instrument" Type="TVisaInstrument"/>
      </Parameters>
      <Block>
        <Execute Statement="Self.Instrument:= Instrument"/>
      </Block>
    </Constructor>

    <Procedure Identifier="TVisaAtrributeGroup.RaiseAttributeError">
      <Parameters>
        <Parameter Identifier="Attribute" Type="string"/>
      </Parameters>
      <Block>
        <Raise Expression="Exception.Create('Attribute ' + Attribute + ' could not be determined')"/>
      </Block>
    </Procedure>

    <Procedure Identifier="TVisaAtrributeGroup.SetAttributeStates" VirtualMethod="vmSetAttributeStates">
      <Parameters>
        <Parameter Identifier="State" Type="TVisaAttributeState"/>
      </Parameters>
      <Block>
      </Block>
    </Procedure>

    <Procedure Identifier="TVisaInstrument.BeginRead">
      <Parameters>
        <Parameter Identifier="AtrributeGroup" Type="TVisaAtrributeGroup"/>
      </Parameters>
      <Block>
      </Block>
    </Procedure>

    <Procedure Identifier="TVisaInstrument.EndRead">
      <Parameters>
        <Parameter Identifier="AtrributeGroup" Type="TVisaAtrributeGroup"/>
      </Parameters>
      <Block>
      </Block>
    </Procedure>

    <Procedure Identifier="TVisaInstrument.BeginWrite">
      <Parameters>
        <Parameter Identifier="AtrributeGroup" Type="TVisaAtrributeGroup"/>
      </Parameters>
      <Block>
      </Block>
    </Procedure>

    <Procedure Identifier="TVisaInstrument.EndWrite">
      <Parameters>
        <Parameter Identifier="AtrributeGroup" Type="TVisaAtrributeGroup"/>
      </Parameters>
      <Block>
      </Block>
    </Procedure>

    <Function Identifier="CreateVisaSession" Type="IVisaSession">
      <Parameters>
        <Parameter Identifier="ResourceName" Type="ViString"/>
      </Parameters>
      <Block>
        <Variable Identifier="ResourceManager" Type="IResourceManager3" Init="CoResourceManager.Create"/>
        <Execute Statement="OleCheck(ResourceManager.Open(ResourceName, TAccessMode.NO_LOCK, 0, '', Result))"/>
      </Block>
    </Function>

    <Constructor Identifier="TVISAInstrument.Create">
      <Parameters>
        <Parameter Identifier="VisaResource" Type="TVisaResource"/>
      </Parameters>
      <Block>
        <Execute Statement="Self.VisaResource:= VisaResource" />
      </Block>
    </Constructor>

    <Function Identifier="TVISAInstrument.ReadFloat" Type="Extended">
      <Block>
        <Variable Identifier="readResult" Type="ViString" Init="VisaResource.AnsiReadNoLF"/>
        <rep:Reporter.Information Target="Visa" Text="Format('Received: %s', readResult)" Condition="DoReportVisa"/>
        <Execute Statement="Result:= CodeToFloat(readResult)"/>
      </Block>
    </Function>

    <Function Identifier="TVISAInstrument.ReadUInt32" Type="UInt32">
      <Block>
        <Variable Identifier="readResult" Type="ViString" Init="VisaResource.AnsiReadNoLF"/>
        <rep:Reporter.Information Target="Visa" Text="Format('Received: %s', readResult)" Condition="DoReportVisa"/>
        <Execute Statement="Result:= StrToUInt(readResult)"/>
      </Block>
    </Function>

    <Function Identifier="TVISAInstrument.ReadSTB" Type="UInt32">
      <Block>
        <Execute Statement="Result:= VisaResource.ReadSTB"/>
        <rep:Reporter.Information Target="Visa" Text="Format('ReadSTB: %u', Result)" Condition="DoReportVisa"/>
      </Block>
    </Function>

    <Function Identifier="TVISAInstrument.QueryString" Type="ViString">
      <Parameters>
        <Parameter Identifier="Query" Type="ViString"/>
      </Parameters>
      <Block>
        <rep:Reporter.Information Target="Visa" Text="Format('Sending: %s', Query)" Condition="DoReportVisa"/>
        <Execute Statement="Result:= VisaResource.AnsiQueryNoLF(Query)"/>
        <rep:Reporter.Information Target="Visa" Text="Format('Received: %s', Result)" Condition="DoReportVisa"/>
      </Block>
    </Function>

    <Function Identifier="TVISAInstrument.QueryFloat" Type="Extended">
      <Parameters>
        <Parameter Identifier="Query" Type="ViString"/>
      </Parameters>
      <Block>
        <rep:Reporter.Information Target="Visa" Text="Format('Sending: %s', Query)" Condition="DoReportVisa"/>
        <Variable Identifier="ResultS" Type="ViString" Init="VisaResource.AnsiQueryNoLF(Query)"/>
        <rep:Reporter.Information Target="Visa" Text="Format('Received: %s', ResultS)" Condition="DoReportVisa"/>
        <Execute Statement="Result:= CodeToFloat(ResultS)"/>
      </Block>
    </Function>

    <Function Identifier="TVISAInstrument.QueryUInt32" Type="UInt32">
      <Parameters>
        <Parameter Identifier="Query" Type="ViString"/>
      </Parameters>
      <Block>
        <rep:Reporter.Information Target="Visa" Text="Format('Sending: %s', Query)" Condition="DoReportVisa"/>
        <Variable Identifier="readResult" Type="ViString" Init="VisaResource.AnsiQueryNoLF(Query)"/>
        <rep:Reporter.Information Target="Visa" Text="Format('Received: %s', readResult)" Condition="DoReportVisa"/>
        <Execute Statement="Result:= StrToUInt(readResult)"/>
      </Block>
    </Function>

    <Function Identifier="TVISAInstrument.QueryConvInt" Type="ConvInt">
      <Parameters>
        <Parameter Identifier="Query" Type="ViString"/>
        <Parameter Identifier="UnitConvertor" Type="TUnitConvertor"/>
      </Parameters>
      <Block>
        <rep:Reporter.Information Target="Visa" Text="Format('Sending: %s', Query)" Condition="DoReportVisa"/>
        <Variable Identifier="readResult" Type="string" Init="VisaResource.AnsiQueryNoLF(Query)"/>
        <rep:Reporter.Information Target="Visa" Text="Format('Received: %s', readResult)" Condition="DoReportVisa"/>
        <Raise Expression="Exception.Create(Format('Cannot convert: %s', readResult))" Condition="not UnitConvertor.StrToIntValue(readResult, Result)"/>
      </Block>
    </Function>

    <Function Identifier="TVISAInstrument.ReadString" Type="ViString">
      <Block>
        <Execute Statement="Result:= VisaResource.AnsiReadNoLF"/>
        <rep:Reporter.Information Target="Visa" Text="Format('Received: %s', Result)" Condition="DoReportVisa"/>
      </Block>
    </Function>

    <Procedure Identifier="TVISAInstrument.WriteString">
      <Parameters>
        <Parameter Identifier="Value" Type="ViString"/>
      </Parameters>
      <Block>
        <rep:Reporter.Information Target="Visa" Text="Format('Sending: %s', Value)" Condition="DoReportVisa"/>
        <Execute Statement="VisaResource.AnsiWrite(Value)"/>
      </Block>
    </Procedure>

    <Function Identifier="TVISAInstrument.ReadOnOff" Type="Boolean">
      <Block>
        <Variable Identifier="readResult" Type="ViString" Init="VisaResource.AnsiReadNoLF"/>
        <Choose>
          <When Expression="readResult = sOn">
            <Execute Statement="Result:= True"/>
          </When>
          <When Expression="readResult = sOff">
            <Execute Statement="Result:= False"/>
          </When>
          <Otherwise>
            <Raise Expression="Exception.Create('Invalid on/off value: ' + readResult)"/>
          </Otherwise>
        </Choose>
      </Block>
    </Function>

    <Function Identifier="TVISAInstrument.QueryOnOff" Type="Boolean">
      <Parameters>
        <Parameter Identifier="Query" Type="ViString"/>
      </Parameters>
      <Block>
        <rep:Reporter.Information Target="Visa" Text="Format('Sending: %s', Query)" Condition="DoReportVisa"/>
        <Variable Identifier="readResult" Type="ViString" Init="VisaResource.AnsiQueryNoLF(Query)"/>
        <Choose>
          <When Expression="readResult = sOn">
            <Execute Statement="Result:= True"/>
          </When>
          <When Expression="readResult = sOff">
            <Execute Statement="Result:= False"/>
          </When>
          <Otherwise>
            <Raise Expression="Exception.Create('Invalid on/off value: ' + readResult)"/>
          </Otherwise>
        </Choose>
      </Block>
    </Function>

    <Procedure Identifier="TVISAInstrument.WriteOnOff">
      <Parameters>
        <Parameter Identifier="Parameter" Type="ViString"/>
        <Parameter Identifier="Value" Type="Boolean"/>
      </Parameters>
      <Block>
        <Variable Identifier="Command" Type="ViString" Init="Parameter + IfElse(Value, sOn, sOff)"/>
        <rep:Reporter.Information Target="Visa" Text="Format('Sending: %s', Command)" Condition="DoReportVisa"/>
        <Execute Statement="VisaResource.AnsiWrite(Command)"/>
      </Block>
    </Procedure>

    <Function Identifier="TVISAInstrument.ReadInt64" Type="Int64">
      <Block>
        <Variable Identifier="readResult" Type="ViString" Init="VisaResource.AnsiReadNoLF"/>
        <rep:Reporter.Information Target="Visa" Text="Format('Received: %s', readResult)" Condition="DoReportVisa"/>
        <Execute Statement="Result:= StrToInt64(readResult)"/>
      </Block>
    </Function>

    <Function Identifier="TVISAInstrument.ReadConvInt" Type="ConvInt">
      <Parameters>
        <Parameter Identifier="UnitConvertor" Type="TUnitConvertor"/>
      </Parameters>
      <Block>
        <Variable Identifier="readResult" Type="string" Init="VisaResource.AnsiReadNoLF"/>
        <rep:Reporter.Information Target="Visa" Text="Format('Received: %s', readResult)" Condition="DoReportVisa"/>
        <Raise Expression="Exception.Create(Format('Cannot convert: %s', readResult))" Condition="not UnitConvertor.StrToIntValue(readResult, Result)"/>
      </Block>
    </Function>

    <Procedure Identifier="TVISAInstrument.WriteParamConvInt">
      <Parameters>
        <Parameter Identifier="Parameter" Type="ViString"/>
        <Parameter Identifier="Value" Type="ConvInt"/>
        <Parameter Identifier="UnitConvertor" Type="TUnitConvertor"/>
      </Parameters>
      <Block>
        <Variable Identifier="Command" Type="ViString" Init="Parameter + viSpace + UnitConvertor.IntValueToEngineeringStr(Value, TUnitPostFix.None, viDecimalSeperatior)"/>
        <rep:Reporter.Information Target="Visa" Text="AnsiFormat('Sending: %s', Command)" Condition="DoReportVisa"/>
        <Execute Statement="VisaResource.AnsiWrite(Command)"/>
      </Block>
    </Procedure>

    <Function Identifier="TVISAInstrument.ReadBlob" Type="TMemoryStream">
      <Parameters>
        <Parameter Identifier="BufSize" Type="UInt32"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= VisaResource.ReadBlob(BufSize)"/>
        <rep:Reporter.Information Target="Visa" Text="Format('Received: %d bytes', Result.Size)" Condition="DoReportVisa"/>
      </Block>
    </Function>

    <Procedure Identifier="TVISAInstrument.WriteBlob">
      <Parameters>
        <Parameter Identifier="Blob" Type="TStream"/>
      </Parameters>
      <Block>
        <rep:Reporter.Information Target="Visa" Text="Format('Sending %d bytes', Blob.Size)" Condition="DoReportVisa"/>
        <Execute Statement="VisaResource.WriteBlob(Blob)"/>
      </Block>
    </Procedure>

    <Procedure Identifier="TVISAInstrument.WriteInt64">
      <Parameters>
        <Parameter Identifier="Parameter" Type="ViString"/>
        <Parameter Identifier="Value" Type="Int64"/>
      </Parameters>
      <Block>
        <Variable Identifier="Command" Type="ViString" Init="AnsiFormat('%s %d', Parameter, Value)"/>
        <rep:Reporter.Information Target="Visa" Text="Format('Sending: %s', Command)" Condition="DoReportVisa"/>
        <Execute Statement="VisaResource.AnsiWrite(Command)"/>
      </Block>
    </Procedure>

    <Property Identifier="TVISAInstrument.IDN" Type="ViString" >
      <Getter>
        <Execute Statement="Result:= QueryString('*IDN?')"/>
      </Getter>
    </Property>

    <Procedure Identifier="TVISAInstrument.ExclusiveLock">
      <Parameters>
        <Parameter Identifier="Timeout" Type="Int32"/>
      </Parameters>
      <Block>
        <Execute Statement="VisaResource.ExclusiveLock(Timeout)"/>
      </Block>
    </Procedure>

    <Procedure Identifier="TVISAInstrument.UnLock">
      <Block>
        <Execute Statement="VisaResource.UnLock"/>
      </Block>
    </Procedure>

    <Property Identifier="TVISAInstrument.Timeout" Type="UInt32">
      <Getter>
        <Execute Statement="Result:= VisaResource.Timeout"/>
      </Getter>
      <Setter>
        <Execute Statement="VisaResource.Timeout:= Value"/>
      </Setter>
    </Property>

    <Function Identifier="TVISAInstrument.IsOperationComplete" Type="Boolean">
      <Constants>
        <Constant Identifier="c0" Type="ViString" Expression="'0'"/>
        <Constant Identifier="c1" Type="ViString" Expression="'1'"/>
      </Constants>
      <Block>
        <Variable Identifier="ResultS" Type="ViString" Init="QueryString(cOPCQuery)"/>
        <Choose>
          <When Expression="ResultS = c0">
            <Execute Statement="Result:= False"/>
          </When>
          <When Expression="ResultS = c1">
            <Execute Statement="Result:= True"/>
          </When>
          <Otherwise>
            <Raise Expression="Exception.Create(sErrorUnsupportedOperation)"/>
          </Otherwise>
        </Choose>
      </Block>
    </Function>

    <Procedure Identifier="TIniHelper.Section">
      <Parameters>
        <Parameter Identifier="Section" Type="string"/>
        <Parameter Identifier="DoSeperate" Type="Boolean"/>
      </Parameters>
      <Block>
        <Execute Statement="CurrentSection:= Section"/>
        <rep:Reporter.Information Text="''" Condition="DoSeperate and EnableEcho"/>
        <rep:Reporter.Information Text="Format('[%s]', Section)" Markup="Header3" Condition="EnableEcho"/>
      </Block>
    </Procedure>

    <Procedure Identifier="TIniHelper.Section">
      <Parameters>
        <Parameter Identifier="Section" Type="string"/>
      </Parameters>
      <Block>
        <Execute Statement="CurrentSection:= Section"/>
        <rep:Reporter.Information Text="''" Condition="EnableEcho"/>
        <rep:Reporter.Information Text="Format('[%s]', Section)" Markup="Header3" Condition="EnableEcho"/>
      </Block>
    </Procedure>

    <Function Identifier="TIniHelper.ReadBool" Type="Boolean">
      <Parameters>
        <Parameter Identifier="Key" Type="string"/>
        <Parameter Identifier="Default" Type="Boolean"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= Inifile.ReadBool(CurrentSection, Key, Default)"/>
        <rep:Reporter.Information Text="Format('%s=%s', Key, IfElse(Result, '1', '0'))" Condition="EnableEcho"/>
      </Block>
    </Function>

    <Function Identifier="TIniHelper.ReadString" Type="string">
      <Parameters>
        <Parameter Identifier="Key" Type="string"/>
        <Parameter Identifier="Default" Type="string"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= Inifile.ReadString(CurrentSection, Key, Default)"/>
        <rep:Reporter.Information Text="Format('%s=%s', Key, Result)" Condition="EnableEcho"/>
      </Block>
    </Function>

    <Function Identifier="TIniHelper.ReadFloat" Type="Extended">
      <Parameters>
        <Parameter Identifier="Key" Type="string"/>
        <Parameter Identifier="Default" Type="Extended"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= CodeToFloat(Inifile.ReadString(CurrentSection, Key, FloatToCode(Default)))"/>
        <rep:Reporter.Information Text="Format('%s=%s', Key, FloatToCode(Result))" Condition="EnableEcho"/>
      </Block>
    </Function>

    <Function Identifier="TIniHelper.ReadInteger" Type="Integer">
      <Parameters>
        <Parameter Identifier="Key" Type="string"/>
        <Parameter Identifier="Default" Type="Integer"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= Inifile.ReadInteger(CurrentSection, Key, Default)"/>
        <rep:Reporter.Information Text="Format('%s=%d', Key, Result)" Condition="EnableEcho"/>
      </Block>
    </Function>

    <Function Identifier="TIniHelper.ReadBoolean" Type="Boolean">
      <Parameters>
        <Parameter Identifier="Key" Type="string"/>
        <Parameter Identifier="Default" Type="Boolean"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= Inifile.ReadBool(CurrentSection, Key, Default)"/>
        <rep:Reporter.Information Text="Format('%s=%d', Key, IfElse(Result, 1, 0))" Condition="EnableEcho"/>
      </Block>
    </Function>

    <Constructor Identifier="TIniHelper.Create">
      <Parameters>
        <Parameter Identifier="Inifile" Type="TCustomIniFile"/>
        <Parameter Identifier="EnableEcho" Type="Boolean"/>
      </Parameters>
      <Block>
        <Execute Statement="Self.Inifile:= Inifile"/>
        <Execute Statement="Self.EnableEcho:= EnableEcho"/>
      </Block>
    </Constructor>

    <Function Identifier="TIniHelper.ReadConvInt" Type="ConvInt">
      <Parameters>
        <Parameter Identifier="Key" Type="string"/>
        <Parameter Identifier="UnitConvertor" Type="TUnitConvertor"/>
        <Parameter Identifier="Default" Type="string"/>
      </Parameters>
      <Block>
        <Variable Identifier="ResultS" Type="string" Init="Inifile.ReadString(CurrentSection, Key, Default)"/>
        <Raise Expression="Exception.Create(Format('Cannot convert: %s', ResultS))" Condition="not UnitConvertor.StrToIntValue(ResultS, Result)"/>
        <rep:Reporter.Information Text="Format('%s=%s', Key, UnitConvertor.IntValueToStr(Result, TUnitPostFix.Separated, '.'))" Condition="EnableEcho"/>
      </Block>
    </Function>

  </Procedures>
</pkg:Library>