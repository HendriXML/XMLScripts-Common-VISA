<?xml version="1.0" encoding="utf-8" standalone="no"?>
<pkg:Library
  xsi:schemaLocation="urn:schemas-www-wisware.nl-scriptingpackages ../XmlSchemas.Common.XmlScript/XMLScripting.Packages.xsd"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:pkg="urn:schemas-www-wisware.nl-scriptingpackages"
  xmlns:sys="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:ado="urn:schemas-www-wisware.nl-xmlscripting-ado"
  xmlns:fil="urn:schemas-www-wisware.nl-xmlscripting-filemanagement"
  xmlns:fwl="urn:schemas-www-wisware.nl-xmlscripting-windowsfirewall"
  xmlns:inx="urn:schemas-www-wisware.nl-xmlscripting-index"
  xmlns:lil="urn:schemas-www-wisware.nl-xmlscripting-linkedlist"
  xmlns:msx="urn:schemas-www-wisware.nl-xmlscripting-xml"
  xmlns:reg="urn:schemas-www-wisware.nl-xmlscripting-registry"
  xmlns:rep="urn:schemas-www-wisware.nl-xmlscripting-report"
  xmlns:sts="urn:schemas-www-wisware.nl-xmlscripting-showstatus"
  xmlns:syu="urn:schemas-www-wisware.nl-xmlscripting-sysutils"
  >
  <Type>
    <Enumeration Identifier="TVisaAttributeState" Elements="NoValue, ValidValue, InvalidValue, PendingChange"/>
    
    <DataClass Identifier="TVisaInstrument">
      <Field Identifier="VisaResource" Type="TVisaResource"/>
    </DataClass>
    
    <DataClass Identifier="TVisaAtrributeGroup" DefaultConstructor="none">
      <VirtualMethod Identifier="vmSetAttributeStates"/>
      <Field Identifier="Instrument" Type="TVisaInstrument"/>
    </DataClass>

    <DataClass Identifier="TRawSample">
      <Field Identifier="Value" Type="Int32"/>
      <Field Identifier="Next" Type="TRawSample"/>
    </DataClass>

    <DataClass Identifier="TAcquisitionInfo">
      <Field Identifier="Time" Type="Extended"/>
      <Field Identifier="TimePerSample" Type="Extended"/>
      <Field Identifier="VFactor" Type="Extended"/>
      <Field Identifier="VOffset" Type="Extended"/>
      <Field Identifier="VUnit" Type="AnsiChar"/>
      <Field Identifier="ProbeAttenuation" Type="Extended"/>
      <Field Identifier="VDiv" Type="Extended"/>
      <Field Identifier="HDiv" Type="Extended"/>
      <Field Identifier="HOffset" Type="Extended"/>
    </DataClass>

    <DataClass Identifier="TMultiFrameAcquisitionInfo" Inherit="TAcquisitionInfo">
      <VirtualMethod Identifier="vmFinalize" IsFinalizer="true"/>
      <Field Identifier="SamplePointManager" Type="TSamplePointManager"/>
      <Field Identifier="Initial" Type="Boolean"/>
      <Field Identifier="Count" Type="UInt32"/>
    </DataClass>

    <DataClass Identifier="TSingleSummedSampleAcquisitionInfo" Inherit="TAcquisitionInfo">
      <VirtualMethod Identifier="vmFinalize" IsFinalizer="true"/>
      <Field Identifier="SamplePointManager" Type="TSamplePoint32Manager"/>
      <Field Identifier="Sample" Type="TSamplePoint32"/>
    </DataClass>

    <DataClass Identifier="TScopeSample">
      <Field Identifier="Time" Type="Extended"/>
      <Field Identifier="Value" Type="Extended"/>
      <Field Identifier="Next" Type="TScopeSample"/>
    </DataClass>

    <DataClass Identifier="TScopeSampleCollection">
      <Field Identifier="SampleHead" Type="TScopeSample"/>
    </DataClass>

  </Type>
  <Procedures>
    <Constructor Identifier="TMultiFrameAcquisitionInfo.Create">
      <Block>
        <Execute Statement="SamplePointManager:= TSamplePointManager.Create"/>
        <Execute Statement="Initial:= True"/>
      </Block>
    </Constructor>

    <Procedure Identifier="TMultiFrameAcquisitionInfo.Finalize" VirtualMethod="vmFinalize">
      <Block>
        <Execute Statement="SamplePointManager.Free"/>
      </Block>
    </Procedure>

    <Constructor Identifier="TSingleSummedSampleAcquisitionInfo.Create">
      <Block>
        <Execute Statement="SamplePointManager:= TSamplePoint32Manager.Create"/>
        <Execute Statement="Sample:= SamplePointManager.NewPoint"/>
      </Block>
    </Constructor>

    <Procedure Identifier="TSingleSummedSampleAcquisitionInfo.Finalize" VirtualMethod="vmFinalize">
      <Block>
        <Execute Statement="SamplePointManager.Free"/>
      </Block>
    </Procedure>

    <Constructor Identifier="TVisaAtrributeGroup.Create">
      <Parameters>
        <Parameter Identifier="Instrument" Type="TVisaInstrument"/>
      </Parameters>
      <Block>
        <Execute Statement="Self.Instrument:= Instrument"/>
      </Block>
    </Constructor>

    <Procedure Identifier="TVisaAtrributeGroup.RaiseAttributeError">
      <Parameters>
        <Parameter Identifier="Attribute" Type="string"/>
      </Parameters>
      <Block>
        <Raise Expression="Exception.Create('Attribute ' + Attribute + ' could not be determined')"/>
      </Block>
    </Procedure>

    <Procedure Identifier="TVisaAtrributeGroup.SetAttributeStates" VirtualMethod="vmSetAttributeStates">
      <Parameters>
        <Parameter Identifier="State" Type="TVisaAttributeState"/>
      </Parameters>
      <Block>
      </Block>
    </Procedure>

    <Procedure Identifier="TVisaInstrument.BeginRead">
      <Parameters>
        <Parameter Identifier="AtrributeGroup" Type="TVisaAtrributeGroup"/>
      </Parameters>
      <Block>
      </Block>
    </Procedure>

    <Procedure Identifier="TVisaInstrument.EndRead">
      <Parameters>
        <Parameter Identifier="AtrributeGroup" Type="TVisaAtrributeGroup"/>
      </Parameters>
      <Block>
      </Block>
    </Procedure>

    <Procedure Identifier="TVisaInstrument.BeginWrite">
      <Parameters>
        <Parameter Identifier="AtrributeGroup" Type="TVisaAtrributeGroup"/>
      </Parameters>
      <Block>
      </Block>
    </Procedure>

    <Procedure Identifier="TVisaInstrument.EndWrite">
      <Parameters>
        <Parameter Identifier="AtrributeGroup" Type="TVisaAtrributeGroup"/>
      </Parameters>
      <Block>
      </Block>
    </Procedure>

    <Function Identifier="CreateVisaSession" Type="IVisaSession">
      <Parameters>
        <Parameter Identifier="ResourceName" Type="AnsiString"/>
      </Parameters>
      <Block>
        <Variable Identifier="ResourceManager" Type="IResourceManager3" Init="CoResourceManager.Create"/>
        <Execute Statement="OleCheck(ResourceManager.Open(ResourceName, TAccessMode.NO_LOCK, 0, '', Result))"/>
      </Block>
    </Function>

    <Constructor Identifier="TVISAInstrument.Create">
      <Parameters>
        <Parameter Identifier="VisaResource" Type="TVisaResource"/>
      </Parameters>
      <Block>
        <Execute Statement="Self.VisaResource:= VisaResource" />
      </Block>
    </Constructor>

    <Function Identifier="TVISAInstrument.ReadFloat" Type="Extended">
      <Block>
        <Variable Identifier="readResult" Type="AnsiString" Init="VisaResource.AnsiReadNoLF"/>
        <Execute Statement="Result:= CodeToFloat(readResult)"/>
      </Block>
    </Function>

    <Function Identifier="TVISAInstrument.ReadUInt32" Type="UInt32">
      <Block>
        <Variable Identifier="readResult" Type="AnsiString" Init="VisaResource.AnsiReadNoLF"/>
        <Execute Statement="Result:= StrToInt(readResult)"/>
      </Block>
    </Function>

    <Function Identifier="TVISAInstrument.QueryString">
      <Parameters>
        <Parameter Identifier="Value" Type="AnsiString"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= VisaResource.AnsiQueryNoLF(Value)"/>
      </Block>
    </Function>

    <Function Identifier="TVISAInstrument.ReadString" Type="AnsiString">
      <Block>
        <Execute Statement="Result:= VisaResource.AnsiReadNoLF"/>
      </Block>
    </Function>

    <Procedure Identifier="TVISAInstrument.WriteString">
      <Parameters>
        <Parameter Identifier="Value" Type="AnsiString"/>
      </Parameters>
      <Block>
        <Execute Statement="VisaResource.AnsiWrite(Value)"/>
      </Block>
    </Procedure>
    
    <Function Identifier="TVISAInstrument.ReadOnOff" Type="Boolean">
      <Constants>
        <Constant Identifier="sOn" Type="AnsiString" Expression="'ON'"/>
        <Constant Identifier="sOff" Type="AnsiString" Expression="'OFF'"/>
      </Constants>
      <Block>
        <Variable Identifier="readResult" Type="AnsiString" Init="VisaResource.AnsiReadNoLF"/>
        <Choose>
          <When Expression="readResult = sOn">
            <Execute Statement="Result:= True"/>
          </When>
          <When Expression="readResult = sOff">
            <Execute Statement="Result:= False"/>
          </When>
          <Otherwise>
            <Raise Expression="Exception.Create('Invalid on/off value: ' + readResult)"/>
          </Otherwise>
        </Choose>
      </Block>
    </Function>

    <Procedure Identifier="TVISAInstrument.WriteOnOff">
      <Parameters>
        <Parameter Identifier="Parameter" Type="AnsiString"/>
        <Parameter Identifier="Value" Type="Boolean"/>
      </Parameters>
      <Constants>
        <Constant Identifier="sOn" Type="AnsiString" Expression="'ON'"/>
        <Constant Identifier="sOff" Type="AnsiString" Expression="'OFF'"/>
      </Constants>
      <Block>
        <Variable Identifier="ValueS" Type="AnsiString" Init="IfElse(Value, sOn, sOff)"/>
        <Execute Statement="VisaResource.AnsiWrite(AnsiFormat('%s %s', Parameter, ValueS))"/>
      </Block>
    </Procedure>

    <Function Identifier="TVISAInstrument.ReadInt64" Type="Int64">
      <Block>
        <Variable Identifier="readResult" Type="AnsiString" Init="VisaResource.AnsiReadNoLF"/>
        <Execute Statement="Result:= StrToInt64(readResult)"/>
      </Block>
    </Function>

    <Function Identifier="TVISAInstrument.ReadBlob" Type="TMemoryStream">
      <Parameters>
        <Parameter Identifier="BufSize" Type="UInt32"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= VisaResource.ReadBlob(BufSize)"/>
      </Block>
    </Function>

    <Procedure Identifier="TVISAInstrument.WriteBlob">
      <Parameters>
        <Parameter Identifier="Blob" Type="TStream"/>
      </Parameters>
      <Block>
        <Execute Statement="VisaResource.WriteBlob(Blob)"/>
      </Block>
    </Procedure>

    <Procedure Identifier="TVISAInstrument.WriteInt64">
      <Parameters>
        <Parameter Identifier="Parameter" Type="AnsiString"/>
        <Parameter Identifier="Value" Type="Int64"/>
      </Parameters>
      <Block>
        <Execute Statement="VisaResource.AnsiWrite(AnsiFormat('%s %d', Parameter, Value))"/>
      </Block>
    </Procedure>

    <Property Identifier="TVISAInstrument.IDN" Type="AnsiString" >
      <Getter>
        <Execute Statement="Result:= QueryString('*IDN?')"/>
      </Getter>
    </Property>

    <Procedure Identifier="TVISAInstrument.ExclusiveLock">
      <Parameters>
        <Parameter Identifier="Timeout" Type="Int32"/>
      </Parameters>
      <Block>
        <Execute Statement="VisaResource.ExclusiveLock(Timeout)"/>
      </Block>
    </Procedure>

    <Procedure Identifier="TVISAInstrument.UnLock">
      <Block>
        <Execute Statement="VisaResource.UnLock"/>
      </Block>
    </Procedure>

    <Property Identifier="TVISAInstrument.Timeout" Type="UInt32">
      <Getter>
        <Execute Statement="Result:= VisaResource.Timeout"/>
      </Getter>
      <Setter>
        <Execute Statement="VisaResource.Timeout:= Value"/>
      </Setter>
    </Property>
    


  </Procedures>
</pkg:Library>